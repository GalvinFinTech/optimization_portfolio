# app.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from PIL import Image
import ta
from datetime import datetime
from vnstock import Vnstock
import numpy as np

from pypfopt import risk_models, black_litterman
from plotly.subplots import make_subplots

from vnstock import Screener, Vnstock
from vnstock.explorer.vci import Company
import concurrent.futures



from portfolio.stock_analysis import generate_stock_analysis
from portfolio.optimize import optimize_portfolio, display_results
from portfolio.utils import fetch_vnindex_data

from data.loader import (
    get_financial_ratios, get_company_table, fetch_and_prepare_data,get_cash_flow,get_income_statement,
    get_balance_sheet, get_officers_info, get_subsidiaries_info, get_shareholders_info, get_all_symbols)
from charts.plots import (
    plot_price_volume,plot_accounting_balance,plot_business_results,plot_cash_flow,plot_capital_structure,
    plot_asset_structure,plot_profit_structure,plot_financial_ratios,plot_operating_efficiency,plot_leverage_ratios,plot_pe_ratio,
    plot_pb_ratio,dupont_analysis_plot,plot_combined_charts,plot_stock_vs_vnindex, visualize_analysis)



def main():
    st.set_page_config(page_title="Stock Dashboard", page_icon="üìà", layout="wide")
    # Th√™m CSS t√πy ch·ªânh cho trang v√† sidebar
    st.markdown(
        """
        <style>
            body {
                background-color: #f0f2f5;  /* M√†u n·ªÅn s√°ng x√°m */
            }
            .header {
                text-align: center;
                background: linear-gradient(135deg, #1e1e1e, #333333); 
                padding: 20px; 
                border-radius: 12px;
                color: white;
            }
            .sidebar .sidebar-content {
                background-color: #4e73df;  /* M√†u n·ªÅn cho sidebar */
                color: white;  /* M√†u ch·ªØ trong sidebar */
            }
            .sidebar .sidebar-content .st-selectbox, .sidebar .sidebar-content .st-button {
                color: #ffffff;  /* M√†u ch·ªØ cho c√°c n√∫t v√† selectbox */
            }
            .sidebar .sidebar-content .st-selectbox select {
                background-color: #007bff;  /* M√†u n·ªÅn cho selectbox */
                color: white;
            }
            .stock-info {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50; /* M·ªôt m√†u t·ªëi cho th√¥ng tin */
            }
            .column {
                border: 1px solid #ddd;  /* ƒê∆∞·ªùng vi·ªÅn nh·∫π */
                border-radius: 5px;
                padding: 15px;
                margin: 10px;
                background-color: white;  /* N·ªÅn tr·∫Øng cho c·ªôt */
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);  /* ƒê·ªï b√≥ng cho c·ªôt */
            }
            .highlight {
                color: green;
            }
            .alert {
                color: red;
            }
        </style>
        """,
        unsafe_allow_html=True
    )
    logo_path = "LOGO.png"  # ƒêi·ªÅn ƒë√∫ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn logo c·ªßa b·∫°n
    st.sidebar.image(logo_path, use_container_width=True)  # Hi·ªÉn th·ªã logo trong sidebar

     # Th√™m banner/header
    banner_path = "banner.png"  # ƒêi·ªÅn ƒë√∫ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh header c·ªßa b·∫°n
    st.image(banner_path, use_container_width=True)  # Hi·ªÉn th·ªã banner ·ªü header
    # Th√™m ti√™u ƒë·ªÅ cho ·ª©ng d·ª•ng




# H√†m t·∫£i d·ªØ li·ªáu c·ªï phi·∫øu v·ªõi x·ª≠ l√Ω l·ªói v√† caching
@st.cache_data
def load_stock_data(code, start_date, end_date):
    """T·∫£i d·ªØ li·ªáu c·ªï phi·∫øu v·ªõi x·ª≠ l√Ω l·ªói."""
    try:
        df_stock = fetch_and_prepare_data(code, start_date, end_date)
        if df_stock.empty:
            st.warning(f"D·ªØ li·ªáu c·ªï phi·∫øu {code} tr·ªëng.")
            return None
        return df_stock
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu cho {code}: {e}")
        return None

# H√†m t·∫£i d·ªØ li·ªáu t√†i ch√≠nh v·ªõi x·ª≠ l√Ω l·ªói v√† caching
@st.cache_data
def load_insights(code):
    """T·∫£i d·ªØ li·ªáu t√†i ch√≠nh v·ªõi x·ª≠ l√Ω l·ªói, ƒë·ªÉ NaN cho c√°c c·ªôt kh√¥ng c√≥ d·ªØ li·ªáu."""
    try:
        cstc = get_financial_ratios(code)
        
        # Danh s√°ch c√°c c·ªôt mong mu·ªën
        selected_columns = [
            ('Meta', 'NƒÉm'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'V·ªën h√≥a (T·ª∑ ƒë·ªìng)'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/E'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/B'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'EPS (VND)'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'EV/EBITDA'),
            ('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROA (%)'),
            ('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROE (%)'),
            ('Ch·ªâ ti√™u c∆° c·∫•u ngu·ªìn v·ªën', 'N·ª£/VCSH'),
            ('Ch·ªâ ti√™u c∆° c·∫•u ngu·ªìn v·ªën', 'TSCƒê / V·ªën CSH'),
            ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'V√≤ng quay t√†i s·∫£n'),
            ('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'Bi√™n l·ª£i nhu·∫≠n r√≤ng (%)'),
            ('Ch·ªâ ti√™u thanh kho·∫£n', 'ƒê√≤n b·∫©y t√†i ch√≠nh'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'BVPS (VND)'),
            ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'S·ªë ng√†y thu ti·ªÅn b√¨nh qu√¢n'),
            ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'S·ªë ng√†y t·ªìn kho b√¨nh qu√¢n'),
            ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'S·ªë ng√†y thanh to√°n b√¨nh qu√¢n'),
        ]
        
        # T·∫°o DataFrame r·ªóng v·ªõi c√°c c·ªôt mong mu·ªën
        df_insights = pd.DataFrame(columns=selected_columns)
        
        # ƒêi·ªÅn d·ªØ li·ªáu t·ª´ cstc v√†o c√°c c·ªôt c√≥ s·∫µn
        for col in selected_columns:
            if col in cstc.columns:
                df_insights[col] = cstc[col]
        
        # ƒê·ªïi t√™n c·ªôt
        df_insights.columns = [
            'NƒÉm', 'V·ªën h√≥a (T·ª∑ ƒë·ªìng)', 'S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)', 'P/E', 'P/B', 'EPS', 'EV/EBITDA',
            'ROA', 'ROE', 'N·ª£/VCSH', 'TSCƒê/VSCH', 'V√≤ng quay t√†i s·∫£n', 'Bi√™n l·ª£i nhu·∫≠n r√≤ng',
            'ƒê√≤n b·∫©y t√†i ch√≠nh', 'BVPS', 'S·ªë ng√†y thu ti·ªÅn b√¨nh qu√¢n', 'S·ªë ng√†y t·ªìn kho b√¨nh qu√¢n',
            'S·ªë ng√†y thanh to√°n b√¨nh qu√¢n'
        ]
        
        return df_insights
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu t√†i ch√≠nh cho {code}: {e}")
        return pd.DataFrame()

# H√†m hi·ªÉn th·ªã th√¥ng tin t·ªïng qu√°t
# H√†m h·ªó tr·ª£ l·∫•y gi√° tr·ªã an to√†n t·ª´ DataFrame
def get_safe_value(df, column):
    if column in df.columns and not df[column].isna().all():
        return df[column].iloc[0]  # L·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n
    return 'N/A'  # Tr·∫£ v·ªÅ 'N/A' n·∫øu c·ªôt kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu

def display_general_info(df_stock, df_insights):
    # Chia layout th√†nh 2 c·ªôt: gi√° c·ªï phi·∫øu (tr√°i), ch·ªâ s·ªë t√†i ch√≠nh (ph·∫£i)
    col1, col2 = st.columns((3, 7))

    # C·ªôt 1: Hi·ªÉn th·ªã gi√° c·ªï phi·∫øu v√† thay ƒë·ªïi
    with col1:
        if df_stock is not None and not df_stock.empty:
            # L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
            latest_data = df_stock.iloc[-1]
            current_price = latest_data['close']

            # Dropdown ch·ªçn kho·∫£ng th·ªùi gian
            time_period = st.selectbox("Ch·ªçn Kho·∫£ng Th·ªùi Gian:", ["24h", "7 ng√†y", "1 th√°ng"], index=0)

            # X√°c ƒë·ªãnh gi√° tham chi·∫øu d·ª±a tr√™n kho·∫£ng th·ªùi gian
            if time_period == "24h":
                reference_data = df_stock.iloc[-2] if len(df_stock) > 1 else df_stock.iloc[-1]
            elif time_period == "7 ng√†y":
                reference_data = df_stock.iloc[-8] if len(df_stock) > 7 else df_stock.iloc[-1]
            elif time_period == "1 th√°ng":
                reference_data = df_stock.iloc[-30] if len(df_stock) > 29 else df_stock.iloc[-1]
            reference_price = reference_data['close']

            # T√≠nh to√°n thay ƒë·ªïi gi√° v√† ph·∫ßn trƒÉm
            change = current_price - reference_price
            percent = round((change / reference_price) * 100, 2) if reference_price != 0 else 0
            color_change = "green" if change > 0 else "red"
            change_display = f"+{change:,.2f}" if change > 0 else f"{change:,.2f}"

            # Hi·ªÉn th·ªã gi√° v√† thay ƒë·ªïi b·∫±ng HTML/CSS
            st.markdown(
                f"""
                <div style="text-align: center; background: linear-gradient(135deg, #1e1e1e, #333333); padding: 20px; border-radius: 12px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);">
                    <h2 style="color: white; font-size: 36px; margin: 0;"><strong>{current_price:,.2f}</strong></h2>
                    <div style="display: flex; justify-content: center; align-items: center; margin: 10px 0;">
                        <span style="font-size: 24px; color: {color_change}; font-weight: bold; margin-right: 15px;">{change_display}</span>
                        <span style="font-size: 20px; color: white; padding: 5px 10px; border: 2px solid {color_change}; border-radius: 5px;">
                            {percent}%
                        </span>
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu gi√° c·ªï phi·∫øu.")

    # C·ªôt 2: Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë t√†i ch√≠nh
    with col2:
        if not df_insights.empty:
            # Danh s√°ch ch·ªâ s·ªë t√†i ch√≠nh v√† nh√£n
            metrics = {
                'V·ªën H√≥a (T·ª∑ ƒë·ªìng)': 'V·ªën h√≥a (T·ª∑ ƒë·ªìng)', 
                'S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)': 'S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)', 
                'EPS': 'EPS', 
                'EV/EBITDA': 'EV/EBITDA', 
                'P/E': 'P/E', 
                'P/B': 'P/B'
            }

            # Chia th√†nh 3 c·ªôt nh·ªè ƒë·ªÉ hi·ªÉn th·ªã c√°c ch·ªâ s·ªë
            cols = st.columns(3)
            for i, (label, col_name) in enumerate(metrics.items()):
                with cols[i % 3]:
                    value = get_safe_value(df_insights, col_name)
                    st.markdown(f"<h6>{label}</h6>", unsafe_allow_html=True)
                    if value == 'N/A':
                        st.markdown("<p style='font-size: 18px; font-weight: bold; color: gray;'>Kh√¥ng c√≥ d·ªØ li·ªáu</p>", unsafe_allow_html=True)
                    else:
                        # ƒê·ªãnh d·∫°ng cho c√°c gi√° tr·ªã l·ªõn (v·ªën h√≥a, s·ªë c·ªï phi·∫øu)
                        if label in ['V·ªën H√≥a (ƒê·ªìng)', 'S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)']:
                            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{value:,.0f}</p>", unsafe_allow_html=True)
                        else:
                            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{value:.2f}</p>", unsafe_allow_html=True)
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu t√†i ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã.")

         

def get_user_inputs():
    st.title("C√¥ng c·ª• T·ªëi ∆∞u Danh m·ª•c ƒê·∫ßu t∆∞")


    # Nh·∫≠p danh s√°ch m√£ c·ªï phi·∫øu (v√≠ d·ª•: "aaa,bbb,ccc")
    symbols_input = st.text_input("Nh·∫≠p danh s√°ch m√£ c·ªï phi·∫øu (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):", "FPT,VNM,HPG,SSI")
    symbols = [s.strip() for s in symbols_input.split(",") if s.strip()]

    # Nh·∫≠p t·ªïng v·ªën ƒë·∫ßu t∆∞
    total_value = st.number_input("Nh·∫≠p t·ªïng v·ªën ƒë·∫ßu t∆∞ (VNƒê):", min_value=1000000, value=1000000, step=100000)



    # Nh·∫≠p k·ª≥ v·ªçng l·ª£i nhu·∫≠n v√† m·ª©c ƒë·ªô t·ª± tin cho t·ª´ng m√£
    st.subheader("Th√¥ng s·ªë cho t·ª´ng m√£")
    viewdict = {}
    confidences = {}

    with st.expander("Nh·∫≠p th√¥ng s·ªë cho t·ª´ng m√£ c·ªï phi·∫øu", expanded=True):
        for symbol in symbols:
            col1, col2 = st.columns(2)
            with col1:
                view = st.number_input(f"T·ª∑ su·∫•t l·ª£i nhu·∫≠n k·ª≥ v·ªçng c·ªßa {symbol} (%)", value=10, key=f"view_{symbol}")
            with col2:
                conf = st.number_input(
                    f"M·ª©c ƒë·ªô t·ª± tin c·ªßa {symbol} (%)",
                    min_value=0, 
                    max_value=100, 
                    value=65, 
                    key=f"conf_{symbol}"
                )

            viewdict[symbol] = view / 100
            confidences[symbol] = conf / 100

    # L·ª±a ch·ªçn m·ª•c ti√™u ƒë·∫ßu t∆∞
    st.subheader("L·ª±a ch·ªçn m·ª•c ti√™u ƒë·∫ßu t∆∞")
    investment_goal = st.selectbox("Ch·ªçn m·ª•c ti√™u ƒë·∫ßu t∆∞:", 
                                   ["T·ªëi ƒëa ho√° t·ª∑ l·ªá Sharpe", 
                                    "ƒê·∫°t m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u v√† t·ªëi thi·ªÉu r·ªßi ro ph√°t sinh",
                                 ])

    target_return = None
    if investment_goal == "ƒê·∫°t m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u v√† t·ªëi thi·ªÉu r·ªßi ro ph√°t sinh":
        target_return = st.number_input("Nh·∫≠p m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u (%):", value=5.0, step=0.1)

    # N√∫t ho√†n th√†nh
    if st.button("X√°c nh·∫≠n"):
        st.success("Th√¥ng tin ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!")

    return symbols, viewdict, confidences, investment_goal, target_return, total_value


def portfolio_optimization_tool(symbols, viewdict, confidences, investment_goal, target_return, total_value):
    # X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian l·∫•y d·ªØ li·ªáu (5 nƒÉm g·∫ßn nh·∫•t)
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - pd.DateOffset(years=5)).strftime('%Y-%m-%d')
    
    # Ph√¢n t√≠ch d·ªØ li·ªáu c·ªï phi·∫øu (t·∫°o b·∫£ng th√¥ng s·ªë t√†i ch√≠nh)
    result_df = generate_stock_analysis(symbols, start_date, end_date, viewdict, confidences)
    
    # T·ªëi ∆∞u danh m·ª•c
    try:
        if investment_goal == "ƒê·∫°t m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u v√† t·ªëi thi·ªÉu r·ªßi ro ph√°t sinh" and target_return is not None:
            ef, weights, allocation, leftover_cash, details_df = optimize_portfolio(
                symbols, total_value, viewdict, confidences, investment_goal, target_return=target_return / 100
            )
        else:
            ef, weights, allocation, leftover_cash, details_df = optimize_portfolio(
                symbols, total_value, viewdict, confidences, investment_goal
            )
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ qua Streamlit v·ªõi c√°c hi·ªáu ·ª©ng tr·ª±c quan
        display_results(result_df, ef, weights, allocation, leftover_cash, details_df, investment_goal)
    
    except Exception as e:
        st.error(f"L·ªói khi t·ªëi ∆∞u danh m·ª•c: {e}")




@st.cache_data
def get_financial_data(tickers):
    stock_data = []
    for ticker in tickers:
        stock = Vnstock().stock(symbol=ticker, source='VCI')
        finance_ratios = stock.finance.ratio(period='year', lang='vi', dropna=True).head(1)
        
        # L·∫•y gi√° tr·ªã t·ª´ c√°c c·ªôt MultiIndex
        data = {
            'CP': ticker,  # S·ª≠a l·∫°i ƒë·ªÉ s·ª≠ d·ª•ng ticker, kh√¥ng ph·∫£i code
            'V·ªën h√≥a (T·ª∑ ƒë·ªìng)': finance_ratios[('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'V·ªën h√≥a (T·ª∑ ƒë·ªìng)')].values[0] / 1e3,  # Chuy·ªÉn ƒë·ªïi t·ª´ t·ª∑ ƒë·ªìng
            'P/B': finance_ratios[('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/B')].values[0],
            'ROE': finance_ratios[('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROE (%)')].values[0],
            'P/E': finance_ratios[('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/E')].values[0],
            'ROA': finance_ratios[('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROA (%)')].values[0]
        }
        stock_data.append(data)
    
    return pd.DataFrame(stock_data)

@st.cache_data
def get_same_industry_stocks(code):
    screener_df = Screener().stock(params={"exchangeName": "HOSE,HNX,UPCOM"}, limit=1700)
    fpt_industry = screener_df[screener_df['ticker'] == code]['industry'].values[0]
    return screener_df[screener_df['industry'] == fpt_industry]['ticker'].tolist()



def phan_tich_nganh(code):
    # L·ªçc d·ªØ li·ªáu c·ªï phi·∫øu
    screener_df = Screener().stock(params={"exchangeName": "HOSE,HNX,UPCOM"}, limit=1700)

    #chart_type = st.radio('Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:', ['Treemap', 'Sunburst'])
    chart_type = 'treemap'  # Bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh
    value_col = 'market_cap'  # C·ªôt m·∫∑c ƒë·ªãnh l√† market_cap
    
    # S·ª≠ d·ª•ng c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh cho chi·ªÅu r·ªông v√† chi·ªÅu cao
    width = 1000
    height = 600
    

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    fig = create_chart(screener_df, value_col, chart_type.lower(), width, height)
    st.plotly_chart(fig)
    
    # Nh·∫≠p m√£ c·ªï phi·∫øu
    # Ki·ªÉm tra c√°c c·ªï phi·∫øu trong c√πng ng√†nh v·ªõi c·ªï phi·∫øu quan t√¢m (FPT m·∫∑c ƒë·ªãnh)
    #code = st.text_input('Nh·∫≠p m√£ c·ªï phi·∫øu:', 'FPT').upper()
    #fpt_industry = screener_df[screener_df['ticker'] == code]['industry'].values[0]
    #same_industry_stocks = screener_df[screener_df['industry'] == fpt_industry]
    same_industry_stocks = get_same_industry_stocks(code)

    
    #st.write(f"Ng√†nh c·ªßa c·ªï phi·∫øu {code}: {fpt_industry}")
    #st.write("C√°c c·ªï phi·∫øu c√πng ng√†nh:")
    #st.dataframe(same_industry_stocks[['ticker', 'industry']])
    
    # L·ªçc d·ªØ li·ªáu t√†i ch√≠nh cho c√°c c·ªï phi·∫øu trong ng√†nh
    df_stocks = get_financial_data(same_industry_stocks)

    # Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn c√°c c·ªï phi·∫øu hi·ªÉn th·ªã
    selected_stocks = st.multiselect(
        'Ch·ªçn c√°c c·ªï phi·∫øu ƒë·ªÉ hi·ªÉn th·ªã:',
        options=df_stocks['CP'].tolist(),
        default=df_stocks['CP'].tolist()  # M·∫∑c ƒë·ªãnh ch·ªçn t·∫•t c·∫£ c√°c c·ªï phi·∫øu
    )

    # L·ªçc d·ªØ li·ªáu theo c√°c c·ªï phi·∫øu ƒë√£ ch·ªçn
    df_filtered = df_stocks[df_stocks['CP'].isin(selected_stocks)]

    # Ch·ªçn gi√° tr·ªã cho tr·ª•c x v√† y
    selected_x = st.selectbox('Ch·ªçn gi√° tr·ªã cho tr·ª•c x:', ['ROE', 'ROA'])
    selected_y = st.selectbox('Ch·ªçn gi√° tr·ªã cho tr·ª•c y:', ['P/B', 'P/E'])

    # V·∫Ω bi·ªÉu ƒë·ªì scatter cho c√°c c·ªï phi·∫øu ƒë√£ ch·ªçn
    fig_scatter = px.scatter(
        df_filtered, 
        x=selected_x, 
        y=selected_y, 
        size="V·ªën h√≥a (T·ª∑ ƒë·ªìng)", 
        text="CP",
        color="V·ªën h√≥a (T·ª∑ ƒë·ªìng)", 
        color_continuous_scale="Rainbow", 
        size_max=120,
        hover_name="CP", 
        hover_data={selected_x: True, selected_y: True, "V·ªën h√≥a (T·ª∑ ƒë·ªìng)": True, "CP": False}
    )

    fig_scatter.update_layout(
        title=f'So s√°nh {selected_x} vs {selected_y} c·ªßa c√°c c·ªï phi·∫øu c√πng ng√†nh',
        xaxis=dict(title=selected_x),
        yaxis=dict(title=selected_y)
    )

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    st.plotly_chart(fig_scatter, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu c·ªßa c√°c c·ªï phi·∫øu ƒë√£ ch·ªçn
    st.dataframe(df_filtered)

    
    # Bi·ªÉu ƒë·ªì th·ªëng k√™ ng√†nh
    sector_counts = screener_df['industry'].value_counts()
    fig_sector = px.bar(
        x=sector_counts.index, y=sector_counts.values, title='S·ªë l∆∞·ª£ng c·ªï phi·∫øu theo ng√†nh',
        color=sector_counts.index,  # S·ª≠ d·ª•ng color cho gi√° tr·ªã ng√†nhr
        color_continuous_scale=px.colors.qualitative.Light24  # Ch·ªçn m√†u h·ª£p l·ªá cho ng√†nh
    )
    st.plotly_chart(fig_sector, use_container_width=True)


    

def create_chart(df, value_col, chart_type='treemap', width=1000, height=600):
    if chart_type == 'treemap':
        fig = px.treemap(df, path=['industry', 'ticker'], values=value_col)
    elif chart_type == 'sunburst':
        fig = px.sunburst(df, path=['industry', 'ticker'], values=value_col)
    fig.update_layout(width=width, height=height)
    return fig


def phan_tich_cp(code, df_stock, df_vnindex,df_insights):
    if df_stock is None or df_insights.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    df_cash_flow = get_cash_flow(code)
    df_income_statement = get_income_statement(code)
    df_balance = get_balance_sheet(code)

    screener_df = Screener().stock(params={"exchangeName": "HOSE,HNX,UPCOM"}, limit=1700)
    stock_data = screener_df[screener_df['ticker'] == code]

    
    left_column, right_column = st.columns((7, 3))
    # C·ªôt b√™n ph·∫£i
    with right_column:
        with st.expander("**Xem chi ti·∫øt d·ªØ li·ªáu t√†i ch√≠nh**", expanded=True):
            df_stock_reversed = df_stock.iloc[::-1]
            st.dataframe(df_stock_reversed)  

    # C·ªôt b√™n tr√°i
    with left_column:
        plot_price_volume(df_stock)

    # T·∫°o c√°c tab trong trang "Ph√¢n t√≠ch c·ªï phi·∫øu"
    t1, t2, t3, t4, t5, t6= st.tabs([
       "T·ªïng quan", "Ph√¢n t√≠ch 360", "Ph√¢n t√≠ch kƒ© thu·∫≠t",
        "T√†i ch√≠nh","D·ªØ li·ªáu","H·ªì s∆°"])


    with t1:
        # üîπ Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ch·ª©ng kho√°n so v·ªõi VN-Index
        visualize_analysis(screener_df,code)
    
    with t2: 
        plot_stock_vs_vnindex(df_stock, df_vnindex, code)


    with t3:
        st.subheader("Ch·ªçn C√°c Th√¥ng S·ªë K·ªπ Thu·∫≠t")

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### Ch·ªçn C·ª≠a S·ªï SMA")
            available_sma_windows = ['10', '14', '20', '50', '100']
            sma_windows = st.multiselect('L·ª±a ch·ªçn c·ª≠a s·ªï SMA (chu k·ª≥)', available_sma_windows)
        with col2:
            st.markdown("### Ch·ªçn C·ª≠a S·ªï EMA")
            available_ema_windows = ['10', '14', '20', '50', '100', '200']
            ema_windows = st.multiselect('L·ª±a ch·ªçn c·ª≠a s·ªï EMA (chu k·ª≥)', available_ema_windows)

        st.markdown("<hr>", unsafe_allow_html=True)

        # Gi·∫£ s·ª≠ df_stock l√† DataFrame ch·ª©a d·ªØ li·ªáu th·ªã tr∆∞·ªùng v·ªõi c√°c c·ªôt 'time', 'open', 'close', 'volume'
        plot_combined_charts(df_stock, sma_windows, ema_windows)
            
    with t4:
        st.subheader("Ph√¢n T√≠ch K·∫øt Qu·∫£ T√†i Ch√≠nh")

        # T·∫°o c√°c expander ƒë·ªÉ ph√°t hi·ªán v√† hi·ªÉn th·ªã t·ª´ng bi·ªÉu ƒë·ªì
        with st.expander("C·∫•u Tr√∫c V·ªën"):
            plot_capital_structure(df_balance)

        with st.expander("C·∫•u Tr√∫c T√†i S·∫£n"):
            plot_asset_structure(df_balance)

        with st.expander("B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n"):
            plot_accounting_balance(df_balance)

        with st.expander("K·∫øt Qu·∫£ Kinh Doanh"):
            plot_business_results(df_income_statement)

        with st.expander("L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá"):
            plot_cash_flow(df_cash_flow)

        with st.expander("C·∫•u Tr√∫c L·ª£i Nhu·∫≠n"):
            plot_profit_structure(df_income_statement)

        # Th√™m m·ªôt s·ªë th√¥ng b√°o h·ªó tr·ª£, nh·∫Øc nh·ªü ng∆∞·ªùi d√πng v·ªÅ n·ªôi dung
        st.markdown("B·∫°n c√≥ th·ªÉ m·ªü c√°c ph·∫ßn ƒë·ªÉ xem bi·ªÉu ƒë·ªì chi ti·∫øt h∆°n. Di chuy·ªÉn chu·ªôt qua c√°c ph·∫ßn ƒë·ªÉ xem th√¥ng tin r√µ h∆°n.")
    with t5:
        cdkt, kqkd, lctt = st.tabs(["B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n", "B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh", "B√°o C√°o L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá"])

        with cdkt:
            # In ƒë·∫≠m t√™n c·ªôt
            styled_balance = df_balance.style.set_properties(**{'font-weight': 'bold'}, subset=df_balance.columns)
            st.dataframe(styled_balance.highlight_max(axis=0))  # Highlight maximum values

            # Cung c·∫•p t√πy ch·ªçn t·∫£i xu·ªëng
            csv_balance = df_balance.to_csv(index=False).encode('utf-8')
            st.download_button("T·∫£i B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n", csv_balance, "balance_sheet.csv", "text/csv")

        with kqkd:
             # In ƒë·∫≠m t√™n c·ªôt
            styled_income = df_income_statement.style.set_properties(**{'font-weight': 'bold'}, subset=df_income_statement.columns)
            st.dataframe(styled_income.highlight_max(axis=0))

            # Cung c·∫•p t√πy ch·ªçn t·∫£i xu·ªëng
            csv_income = df_income_statement.to_csv(index=False).encode('utf-8')
            st.download_button("T·∫£i B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh", csv_income, "income_statement.csv", "text/csv")

        with lctt:
            # In ƒë·∫≠m t√™n c·ªôt
            styled_cash_flow = df_cash_flow.style.set_properties(**{'font-weight': 'bold'}, subset=df_cash_flow.columns)
            st.dataframe(styled_cash_flow.highlight_max(axis=0))

            # Cung c·∫•p t√πy ch·ªçn t·∫£i xu·ªëng
            csv_cash_flow = df_cash_flow.to_csv(index=False).encode('utf-8')
            st.download_button("T·∫£i B√°o C√°o L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá", csv_cash_flow, "cash_flow_statement.csv", "text/csv")
        

        
    with t6:
    # T·∫°o khung cho m·ªói kh·ªëi th√¥ng tin
        st.markdown("<h2 style='text-align: center;'>Th√¥ng Tin C√¥ng Ty</h2>", unsafe_allow_html=True)

        # Ban l√£nh ƒë·∫°o
        with st.container():
            st.markdown("<h3 style='color: #4B0082;'>Ban L√£nh ƒê·∫°o</h3>", unsafe_allow_html=True)
            officers_info = get_officers_info(code)
            if officers_info is None or officers_info.empty:
                st.warning("Kh√¥ng c√≥ th√¥ng tin ban l√£nh ƒë·∫°o.")
            else:
                # T·∫°m b·ªè styling ƒë·ªÉ ki·ªÉm tra
                st.dataframe(officers_info)  # Th·ª≠ m√† kh√¥ng c√≥ highlighting
                # N·∫øu mu·ªën gi·ªØ highlighting:
                # st.dataframe(officers_info.style.highlight_max(axis=0))

        # C·ªï ƒë√¥ng l·ªõn
        with st.container():
            st.markdown("<h3 style='color: #4B0082;'>C·ªï ƒê√¥ng L·ªõn</h3>", unsafe_allow_html=True)
            shareholders_info = get_shareholders_info(code)
            if shareholders_info is None or shareholders_info.empty:
                st.warning("Kh√¥ng c√≥ th√¥ng tin v·ªÅ c·ªï ƒë√¥ng l·ªõn.")
            else:
                # T·∫°m b·ªè styling ƒë·ªÉ ki·ªÉm tra
                st.dataframe(shareholders_info)  # Th·ª≠ m√† kh√¥ng c√≥ highlighting

        # C√¥ng ty con
        with st.container():
            # C√¥ng ty con (ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ d·ªØ li·ªáu)
            try:
                subsidiaries_info = get_subsidiaries_info(code)

                # Ki·ªÉm tra n·∫øu d·ªØ li·ªáu h·ª£p l·ªá v√† kh√¥ng r·ªóng
                if isinstance(subsidiaries_info, pd.DataFrame) and not subsidiaries_info.empty:
                    with st.container():
                        st.markdown("<h3 style='color: #4B0082;'>C√¥ng Ty Con</h3>", unsafe_allow_html=True)
                        st.dataframe(subsidiaries_info)  # Hi·ªÉn th·ªã d·ªØ li·ªáu
                # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, KH√îNG hi·ªÉn th·ªã g√¨ c·∫£ (kh√¥ng c√≥ st.info hay st.warning)
                
            except Exception as e:
                st.error(f"Kh√¥ng c√≥ d·ªØ li·ªáu c√¥ng ty con")

                
def main():
    st.set_page_config(page_title="Stock Dashboard", page_icon="üìà", layout="wide")
    # Th√™m CSS t√πy ch·ªânh cho trang v√† sidebar
    st.markdown(
        """
        <style>
            body {
                background-color: #f0f2f5;
            }
            .header {
                text-align: center;
                background: linear-gradient(135deg, #1e1e1e, #333333);
                padding: 20px;
                border-radius: 12px;
                color: white;
            }
            .sidebar .sidebar-content {
                background-color: #4e73df;
                color: white;
            }
            .sidebar .sidebar-content .st-selectbox, .sidebar .sidebar-content .st-button {
                color: #ffffff;
            }
            .sidebar .sidebar-content .st-selectbox select {
                background-color: #007bff;
                color: white;
            }
            .stock-info {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
            }
            .column {
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 15px;
                margin: 10px;
                background-color: white;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            }
            .highlight {
                color: green;
            }
            .alert {
                color: red;
            }
            .metric-box {
                background-color: #ffffff;
                padding: 10px;
                border-radius: 8px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }
        </style>
        """,
        unsafe_allow_html=True
    )
    logo_path = "LOGO.png"  # ƒêi·ªÅn ƒë√∫ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn logo c·ªßa b·∫°n
    st.sidebar.image(logo_path, use_container_width=True)  # Hi·ªÉn th·ªã logo trong sidebar

    


     # Th√™m banner/header
    banner_path = "banner.png"  # ƒêi·ªÅn ƒë√∫ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh header c·ªßa b·∫°n
    st.image(banner_path)  # Hi·ªÉn th·ªã banner ·ªü header
    

    symbols = get_all_symbols() 
    default_index = next((i for i, symbol in enumerate(symbols) if symbol.strip().upper() == "FPT"), 0)
    code = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", options=symbols, index=default_index)
    

       
    # X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian (5 nƒÉm g·∫ßn ƒë√¢y)
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - pd.DateOffset(years=5)).strftime('%Y-%m-%d')

    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu c·ªï phi·∫øu..."):
        df_stock = load_stock_data(code, start_date, end_date)
        df_insights = load_insights(code)
        df_vnindex = fetch_vnindex_data(start_date, end_date)
        company_df = get_company_table(code)
    
    if df_stock is not None and not df_insights.empty:
        display_general_info(df_stock, df_insights)
    

    # Sidebar
    st.sidebar.title("Tr·ª£ l√Ω t√†i ch√≠nh")
    options = st.sidebar.selectbox("Ch·ª©c nƒÉng", 
                                ["Ph√¢n t√≠ch c·ªï phi·∫øu", "Ph√¢n t√≠ch ng√†nh", "C√¥ng c·ª• t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞"])

    # Ph√¢n t√≠ch c·ªï phi·∫øu
    if options == 'Ph√¢n t√≠ch c·ªï phi·∫øu':
        if df_stock is not None and not df_insights.empty:
            phan_tich_cp(code, df_stock, df_vnindex, df_insights)
        else:
            st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch c·ªï phi·∫øu.")

    # Ph√¢n t√≠ch ng√†nh
    elif options == 'Ph√¢n t√≠ch ng√†nh':
        phan_tich_nganh(code)  # G·ªçi h√†m ph√¢n t√≠ch ng√†nh

    # C√¥ng c·ª• t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞
    elif options == 'C√¥ng c·ª• t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞':
        symbols, viewdict, confidences, investment_goal, target_return, total_value = get_user_inputs()
        if st.button("Ch·∫°y t·ªëi ∆∞u danh m·ª•c"):
            portfolio_optimization_tool(symbols, viewdict, confidences, investment_goal, target_return, total_value)
    
    st.markdown('<div class="footer">¬© 2025 Portfolio Dashboard. All Rights Reserved.</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()
