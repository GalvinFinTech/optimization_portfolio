# app.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from PIL import Image
import ta
from datetime import datetime
from vnstock import Vnstock
import numpy as np

from pypfopt import risk_models, black_litterman
from plotly.subplots import make_subplots



from portfolio.stock_analysis import generate_stock_analysis
from portfolio.optimize import optimize_portfolio, display_results
from portfolio.utils import fetch_vnindex_data

from data.loader import (
    get_financial_ratios, get_company_table, fetch_and_prepare_data,get_cash_flow,get_income_statement,
    get_balance_sheet, get_officers_info, get_subsidiaries_info, get_shareholders_info, get_all_symbols)
from charts.plots import (
    plot_price_volume,plot_accounting_balance,plot_business_results,plot_cash_flow,plot_capital_structure,
    plot_asset_structure,plot_profit_structure,plot_financial_ratios,plot_operating_efficiency,plot_leverage_ratios,plot_pe_ratio,
    plot_pb_ratio,dupont_analysis_plot,plot_combined_charts,plot_stock_vs_vnindex)


# ------------------------
# C√°c h√†m hi·ªÉn th·ªã trang c·ªßa ·ª©ng d·ª•ng
# ------------------------
    # Th√™m logo v√†o sidebar


def main():
    st.set_page_config(page_title="Stock Dashboard", page_icon="üìà", layout="wide")
    # Th√™m CSS t√πy ch·ªânh cho trang v√† sidebar
    st.markdown(
        """
        <style>
            body {
                background-color: #f0f2f5;  /* M√†u n·ªÅn s√°ng x√°m */
            }
            .header {
                text-align: center;
                background: linear-gradient(135deg, #1e1e1e, #333333); 
                padding: 20px; 
                border-radius: 12px;
                color: white;
            }
            .sidebar .sidebar-content {
                background-color: #4e73df;  /* M√†u n·ªÅn cho sidebar */
                color: white;  /* M√†u ch·ªØ trong sidebar */
            }
            .sidebar .sidebar-content .st-selectbox, .sidebar .sidebar-content .st-button {
                color: #ffffff;  /* M√†u ch·ªØ cho c√°c n√∫t v√† selectbox */
            }
            .sidebar .sidebar-content .st-selectbox select {
                background-color: #007bff;  /* M√†u n·ªÅn cho selectbox */
                color: white;
            }
            .stock-info {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50; /* M·ªôt m√†u t·ªëi cho th√¥ng tin */
            }
            .column {
                border: 1px solid #ddd;  /* ƒê∆∞·ªùng vi·ªÅn nh·∫π */
                border-radius: 5px;
                padding: 15px;
                margin: 10px;
                background-color: white;  /* N·ªÅn tr·∫Øng cho c·ªôt */
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);  /* ƒê·ªï b√≥ng cho c·ªôt */
            }
            .highlight {
                color: green;
            }
            .alert {
                color: red;
            }
        </style>
        """,
        unsafe_allow_html=True
    )
    logo_path = "LOGO.png"  # ƒêi·ªÅn ƒë√∫ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn logo c·ªßa b·∫°n
    st.sidebar.image(logo_path, use_column_width=True)  # Hi·ªÉn th·ªã logo trong sidebar

     # Th√™m banner/header
    banner_path = "banner.png"  # ƒêi·ªÅn ƒë√∫ng ƒë∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh header c·ªßa b·∫°n
    st.image(banner_path, use_column_width=True)  # Hi·ªÉn th·ªã banner ·ªü header
    # Th√™m ti√™u ƒë·ªÅ cho ·ª©ng d·ª•ng






    # L·∫•y danh s√°ch m√£ c·ªï phi·∫øu
    symbols = get_all_symbols()  # symbols l√† list c√°c m√£ c·ªï phi·∫øu
    # Hi·ªÉn th·ªã selectbox v·ªõi danh s√°ch m√£ c·ªï phi·∫øu, m·∫∑c ƒë·ªãnh ch·ªçn 'VCI' n·∫øu c√≥
    #default_index = symbols.index('FPT') if 'FPT' in symbols else 0
    default_index = next((i for i, symbol in enumerate(symbols) if symbol.strip().upper() == "FPT"), 0)

    code = st.selectbox("Ch·ªçn m√£ c·ªï phi·∫øu", options=symbols, index=default_index)
    

       
    # X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian (5 nƒÉm g·∫ßn ƒë√¢y)
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - pd.DateOffset(years=5)).strftime('%Y-%m-%d')
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu c·ªï phi·∫øu..."):
        # T·∫£i d·ªØ li·ªáu t·ª´ c√°c module loader
        company_df = get_company_table(code)
        df_vnindex = fetch_vnindex_data(start_date, end_date)
        df_stock = fetch_and_prepare_data(code, start_date, end_date)
        cstc = get_financial_ratios(code)

        
        selected_columns = [
            ( 'Meta', 'NƒÉm'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'V·ªën h√≥a (T·ª∑ ƒë·ªìng)'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/E'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'P/B'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'EPS (VND)'),
            ('Ch·ªâ ti√™u ƒë·ªãnh gi√°', 'EV/EBITDA'),
            ('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROA (%)'),
            ('Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i', 'ROE (%)'),
            ('Ch·ªâ ti√™u c∆° c·∫•u ngu·ªìn v·ªën','N·ª£/VCSH'),
            ('Ch·ªâ ti√™u c∆° c·∫•u ngu·ªìn v·ªën','TSCƒê / V·ªën CSH'),
            ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông','V√≤ng quay t√†i s·∫£n'),
            ( 'Ch·ªâ ti√™u kh·∫£ nƒÉng sinh l·ª£i','Bi√™n l·ª£i nhu·∫≠n r√≤ng (%)'),
            ( 'Ch·ªâ ti√™u thanh kho·∫£n', 'ƒê√≤n b·∫©y t√†i ch√≠nh'), 
            ( 'Ch·ªâ ti√™u ƒë·ªãnh gi√°','BVPS (VND)'),
            ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông',   'S·ªë ng√†y thu ti·ªÅn b√¨nh qu√¢n'),
                ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông',    'S·ªë ng√†y t·ªìn kho b√¨nh qu√¢n'),
                ('Ch·ªâ ti√™u hi·ªáu qu·∫£ ho·∫°t ƒë·ªông', 'S·ªë ng√†y thanh to√°n b√¨nh qu√¢n'),
        ]
        
        df_insights = cstc.loc[:, selected_columns]
        df_insights.columns = ['NƒÉm','V·ªën h√≥a (T·ª∑ ƒë·ªìng)','S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)', 'P/E', 'P/B', 'EPS', 'EV/EBITDA','ROA','ROE','N·ª£/VCSH','TSCƒê/VSCH','V√≤ng quay t√†i s·∫£n',
                            'Bi√™n l·ª£i nhu·∫≠n r√≤ng','ƒê√≤n b·∫©y t√†i ch√≠nh','BVPS','S·ªë ng√†y thu ti·ªÅn b√¨nh qu√¢n','S·ªë ng√†y t·ªìn kho b√¨nh qu√¢n','S·ªë ng√†y thanh to√°n b√¨nh qu√¢n']
        
        ebitda = df_insights['EV/EBITDA'].iloc[0]
        pe = df_insights['P/E'].iloc[0]
        pb = df_insights['P/B'].iloc[0]
        eps = df_insights['EPS'].iloc[0]
        mar = df_insights['V·ªën h√≥a (T·ª∑ ƒë·ªìng)'].iloc[0]
        cp = df_insights['S·ªë CP l∆∞u h√†nh (Tri·ªáu CP)'].iloc[0]

    

    
    # Hi·ªÉn th·ªã th√¥ng tin t·ªïng qu√°t
    col1, col2 = st.columns((3, 7))

    with col1: 
        # L·∫•y d·ªØ li·ªáu c·ªßa ng√†y hi·ªán t·∫°i
        latest_data = df_stock.iloc[-1]
        current_price = latest_data['close']  # Gi√° hi·ªán t·∫°i
        current_date = latest_data.name  # Gi·∫£ ƒë·ªãnh r·∫±ng c·ªôt index l√† ng√†y

        # T·∫°o dropdown v√† l·∫•y th√¥ng tin ch·ªçn
        time_period = st.selectbox("Ch·ªçn Kho·∫£ng Th·ªùi Gian:", ["24h", "7 ng√†y", "1 th√°ng"], index=0)

        # Kh·ªüi t·∫°o bi·∫øn cho gi√° tham chi·∫øu
        reference_price = current_price

        # T√≠nh to√°n gi√° tham chi·∫øu d·ª±a tr√™n kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
        if time_period == "24h":
            reference_data = df_stock.iloc[-2]  # L·∫•y d·ªØ li·ªáu c·ªßa ng√†y h√¥m tr∆∞·ªõc
        elif time_period == "7 ng√†y":
            reference_data = df_stock.iloc[-8]  # L·∫•y d·ªØ li·ªáu 7 ng√†y tr∆∞·ªõc (n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu)
        elif time_period == "1 th√°ng":
            reference_data = df_stock.iloc[-30]  # L·∫•y d·ªØ li·ªáu 30 ng√†y tr∆∞·ªõc (n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu)

        # L·∫•y gi√° tham chi·∫øu ·ªü th·ªùi ƒëi·ªÉm ƒë√£ ch·ªçn
        reference_price = reference_data['close']

        # T√≠nh to√°n ch√™nh l·ªách v√† ph·∫ßn trƒÉm tƒÉng gi·∫£m
        change = current_price - reference_price
        percent = round((change / reference_price) * 100, 2)

        # B·ªë c·ª•c hi·ªÉn th·ªã tr√™n Streamlit v·ªõi k√≠ch th∆∞·ªõc nh·ªè v√† cƒÉn gi·ªØa
        # Hi·ªÉn th·ªã th√¥ng tin gi√° h√¥m nay v·ªõi b·ªë c·ª•c ƒë·∫πp h∆°n
        # Hi·ªÉn th·ªã th√¥ng tin gi√° hi·ªán t·∫°i, thay ƒë·ªïi v√† ph·∫ßn trƒÉm tƒÉng gi·∫£m m√† kh√¥ng c√≥ ti√™u ƒë·ªÅ
        # Hi·ªÉn th·ªã th√¥ng tin gi√° hi·ªán t·∫°i, thay ƒë·ªïi v√† ph·∫ßn trƒÉm tƒÉng/gi·∫£m
        # T√≠nh to√°n m√†u s·∫Øc cho change
        if change > 0:
            color_change = "green"  # M√†u xanh cho thay ƒë·ªïi d∆∞∆°ng
            change_display = f"+{change:,.2f}"  # Th√™m d·∫•u '+' n·∫øu tƒÉng
        else:
            color_change = "red"  # M√†u ƒë·ªè cho thay ƒë·ªïi √¢m
            change_display = f"{change:,.2f}"  # D·∫•u '-' t·ª± ƒë·ªông s·∫Ω c√≥ n·∫øu gi·∫£m

        # Hi·ªÉn th·ªã th√¥ng tin v·ªõi b·ªë c·ª•c ƒë·∫πp h∆°n
        st.markdown(
            f"""
            <div style="text-align: center; background: linear-gradient(135deg, #1e1e1e, #333333); padding: 20px; border-radius: 12px; max-width: 400px; margin: auto; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);">
                <h2 style="color: white; font-size: 36px; margin: 0;"><strong>{current_price:,.2f}</strong></h2>
                <div style="display: flex; justify-content: center; align-items: center; margin: 10px 0;">
                    <span style="font-size: 24px; color: {color_change}; font-weight: bold; margin-right: 15px;">{change_display}</span>
                    <span style="font-size: 20px; color: white; padding: 5px 10px; border: 2px solid {color_change}; border-radius: 5px;">
                        {percent}%
                    </span>
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )

    with col2:
        # Thi·∫øt l·∫≠p 3 c·ªôt ƒë·∫ßu ti√™n
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("<h6 style='margin: 0;'>V·ªën H√≥a (ƒê·ªìng)</h6>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{mar:,.0f}</p>", unsafe_allow_html=True)

        with col2:
            st.markdown("<h6 style='margin: 0;'>S·ªë C·ªï Phi·∫øu L∆∞u H√†nh</h6>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{cp:,.0f}</p>", unsafe_allow_html=True)

        with col3:
            st.markdown("<h6 style='margin: 0;'>EPS</h6>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{eps:,.0f}</p>", unsafe_allow_html=True)

        # Thi·∫øt l·∫≠p 3 c·ªôt th·ª© hai
        col4, col5, col6 = st.columns(3)

        with col4:
            st.markdown("<h6 style='margin: 0;'>EV/EBITDA</h6>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{ebitda:.2f}</p>", unsafe_allow_html=True)

        with col5:
            st.markdown("<h6 style='margin: 0;'>P/E</h6>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{pe:.2f}</p>", unsafe_allow_html=True)

        with col6:
            st.markdown("<h6 style='margin: 0;'>P/B</h6>", unsafe_allow_html=True)
            st.markdown(f"<p style='font-size: 18px; font-weight: bold;'>{pb:.2f}</p>", unsafe_allow_html=True)
    # üîπ Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    # ƒêi·ªÅu h∆∞·ªõng trang

    st.sidebar.title("Tr·ª£ l√Ω t√†i ch√≠nh")
    options = st.sidebar.selectbox("Ch·ª©c nƒÉng", 
                                   ["Ph√¢n t√≠ch c·ªï phi·∫øu", "C√¥ng c·ª• t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞"])

    if options == 'Ph√¢n t√≠ch c·ªï phi·∫øu':
        phan_tich_cp(code, df_stock, df_vnindex, df_insights, company_df)

    elif options == 'C√¥ng c·ª• t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞':
        symbols, viewdict, confidences, investment_goal, target_return, total_value = get_user_inputs()
        if st.button("Ch·∫°y t·ªëi ∆∞u danh m·ª•c"):
            portfolio_optimization_tool(symbols, viewdict, confidences, investment_goal, target_return, total_value)



# h√†m x·ª≠ l√Ω nh·∫≠p li·ªáu ch√≠nh
def get_user_inputs():
    st.title("C√¥ng c·ª• t·ªëi ∆∞u danh m·ª•c ƒë·∫ßu t∆∞")
    
    # Nh·∫≠p danh s√°ch m√£ c·ªï phi·∫øu (v√≠ d·ª•: "AAA,BBB,CCC")
    symbols_input = st.text_input("Nh·∫≠p danh s√°ch m√£ c·ªï phi·∫øu (c√°ch nhau b·∫±ng d·∫•u ph·∫©y):", "FPT,VCI,HPG")
    symbols = [s.strip() for s in symbols_input.split(",") if s.strip()]
    
    # Nh·∫≠p t·ªïng v·ªën ƒë·∫ßu t∆∞
    total_value = st.number_input("Nh·∫≠p t·ªïng v·ªën ƒë·∫ßu t∆∞ (VNƒê):", min_value=1000000, value=1000000, step=100000)
    
    # Nh·∫≠p k·ª≥ v·ªçng l·ª£i nhu·∫≠n v√† m·ª©c ƒë·ªô t·ª± tin cho t·ª´ng m√£
    st.subheader("Th√¥ng s·ªë cho t·ª´ng m√£")
    viewdict = {}
    confidences = {}
    for symbol in symbols:
        col1, col2 = st.columns(2)
        with col1:
            view = st.number_input(f"T·ª∑ su·∫•t l·ª£i nhu·∫≠n k·ª≥ v·ªçng c·ªßa {symbol} (%)", value=10, key=f"view_{symbol}")
        with col2:
            conf = st.number_input(
                f"M·ª©c ƒë·ªô t·ª± tin c·ªßa {symbol} (%)",
                min_value=0, 
                max_value=100, 
                value=65, 
                key=f"conf_{symbol}"
            )

        viewdict[symbol] = view / 100
        confidences[symbol] = conf / 100
    
    # L·ª±a ch·ªçn m·ª•c ti√™u ƒë·∫ßu t∆∞
    investment_goal = st.selectbox("Ch·ªçn m·ª•c ti√™u ƒë·∫ßu t∆∞:", 
                                   ["T·ªëi ƒëa ho√° t·ª∑ l·ªá Sharpe", 
                                    "ƒê·∫°t m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u v√† t·ªëi thi·ªÉu r·ªßi ro ph√°t sinh",
                                    "KI·ªÇM SO√ÅT CVaR V√Ä T·ªêI ƒêA L·ª¢I NHU·∫¨N K·ª≤ V·ªåNG",
                                    "KI·ªÇM SO√ÅT CDaR V√Ä T·ªêI ƒêA L·ª¢I NHU·∫¨N K·ª≤ V·ªåNG"])
    
    target_return = None
    if investment_goal == "ƒê·∫°t m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u v√† t·ªëi thi·ªÉu r·ªßi ro ph√°t sinh":
        target_return = st.number_input("Nh·∫≠p m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u (%):", value=5.0)
    
    return symbols, viewdict, confidences, investment_goal, target_return, total_value


def portfolio_optimization_tool(symbols, viewdict, confidences, investment_goal, target_return, total_value):
    # X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian l·∫•y d·ªØ li·ªáu (5 nƒÉm g·∫ßn nh·∫•t)
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today() - pd.DateOffset(years=5)).strftime('%Y-%m-%d')
    
    # Ph√¢n t√≠ch d·ªØ li·ªáu c·ªï phi·∫øu (t·∫°o b·∫£ng th√¥ng s·ªë t√†i ch√≠nh)
    result_df = generate_stock_analysis(symbols, start_date, end_date, viewdict, confidences)
    
    # T·ªëi ∆∞u danh m·ª•c ‚Äì n·∫øu c√≥ target_return ƒë∆∞·ª£c nh·∫≠p th√¨ truy·ªÅn v√†o optimize_portfolio
    if investment_goal == "ƒê·∫°t m·ª©c l·ª£i nhu·∫≠n m·ª•c ti√™u v√† t·ªëi thi·ªÉu r·ªßi ro ph√°t sinh":
        ef, weights, allocation, leftover_cash, details_df = optimize_portfolio(
            symbols, total_value, viewdict, confidences, investment_goal, target_return=target_return / 100
        )
    else:
        ef, weights, allocation, leftover_cash, details_df = optimize_portfolio(
            symbols, total_value, viewdict, confidences, investment_goal
        )
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ qua Streamlit v·ªõi c√°c hi·ªáu ·ª©ng tr·ª±c quan
    display_results(result_df, ef, weights, allocation, leftover_cash, details_df, investment_goal)
    

# ------------------------
# Trang ph√¢n t√≠ch c·ªï phi·∫øu
# ------------------------


def phan_tich_cp(code, df_stock, df_vnindex, df_insights, company_df):

    
    df_cash_flow = get_cash_flow(code)
    df_income_statement = get_income_statement(code)
    df_balance = get_balance_sheet(code)
    
    left_column, right_column = st.columns((7, 3))
    # C·ªôt b√™n ph·∫£i
    with right_column:
        with st.expander("**Xem chi ti·∫øt d·ªØ li·ªáu t√†i ch√≠nh**", expanded=True):
            df_stock_reversed = df_stock.iloc[::-1]
            st.dataframe(df_stock_reversed)  

    # C·ªôt b√™n tr√°i
    with left_column:
        plot_price_volume(df_stock)

    # T·∫°o c√°c tab trong trang "Ph√¢n t√≠ch c·ªï phi·∫øu"
    t2, t3, t4, t5, t6= st.tabs([
        "Ph√¢n t√≠ch 360", "Ph√¢n t√≠ch kƒ© thu·∫≠t",
        "T√†i ch√≠nh", "H·ªì s∆°", "D·ªØ li·ªáu"])

    
    with t2:
        # üîπ Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ch·ª©ng kho√°n so v·ªõi VN-Index
        plot_stock_vs_vnindex(df_stock, df_vnindex, code)

        # T·∫°o c√°c tab cho c√°c ch·ªâ s·ªë
        tab1, tab2, tab3 = st.tabs(["Ch·ªâ S·ªë Hi·ªáu Qu·∫£ Ho·∫°t ƒê·ªông", "Ch·ªâ S·ªë S·ª©c Kh·ªèe T√†i Ch√≠nh", "Ch·ªâ S·ªë ƒê·ªãnh Gi√°"])

        # Tab 1: Ch·ªâ S·ªë Hi·ªáu Qu·∫£ Ho·∫°t ƒê·ªông
        with tab1:
       
            plot_operating_efficiency(df_insights)
            st.markdown("Bi·ªÉu ƒë·ªì n√†y cho th·∫•y kh·∫£ nƒÉng sinh l·ªùi v√† qu·∫£n l√Ω t√†i s·∫£n c·ªßa c√¥ng ty.")

        # Tab 2: Ch·ªâ S·ªë S·ª©c Kh·ªèe T√†i Ch√≠nh
        with tab2:
  
            plot_leverage_ratios(df_insights)
            st.markdown("Bi·ªÉu ƒë·ªì n√†y cho th·∫•y m·ª©c ƒë·ªô s·ª≠ d·ª•ng n·ª£ trong c·∫•u tr√∫c v·ªën c√¥ng ty.")

            plot_financial_ratios(df_insights)
            st.markdown("Bi·ªÉu ƒë·ªì n√†y th·ªÉ hi·ªán c√°c t·ª∑ su·∫•t l·ª£i nhu·∫≠n kh√°c nhau c·ªßa c√¥ng ty.")

        # Tab 3: Ch·ªâ S·ªë ƒê·ªãnh Gi√°
        with tab3:            
            plot_pe_ratio(df_insights)
            st.markdown("Bi·ªÉu ƒë·ªì n√†y gi√∫p ƒë√°nh gi√° c·ªï phi·∫øu d·ª±a tr√™n thu nh·∫≠p c·ªßa n√≥.")

            plot_pb_ratio(df_insights)
            st.markdown("Bi·ªÉu ƒë·ªì n√†y cho th·∫•y gi√° tr·ªã t√†i s·∫£n so v·ªõi t√†i s·∫£n th·ª±c t·∫ø.")

            dupont_analysis_plot(df_insights)
            st.markdown("Ph√¢n t√≠ch DuPont gi√∫p ph√¢n t√≠ch l·ª£i nhu·∫≠n v√† ƒë√≤n b·∫©y t√†i ch√≠nh c·ªßa c√¥ng ty.")
            
    with t3:
        st.subheader("Ch·ªçn C√°c Th√¥ng S·ªë K·ªπ Thu·∫≠t")

        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### Ch·ªçn C·ª≠a S·ªï SMA")
            available_sma_windows = ['10', '14', '20', '50', '100']
            sma_windows = st.multiselect('L·ª±a ch·ªçn c·ª≠a s·ªï SMA (chu k·ª≥)', available_sma_windows)
        with col2:
            st.markdown("### Ch·ªçn C·ª≠a S·ªï EMA")
            available_ema_windows = ['10', '14', '20', '50', '100', '200']
            ema_windows = st.multiselect('L·ª±a ch·ªçn c·ª≠a s·ªï EMA (chu k·ª≥)', available_ema_windows)

        st.markdown("<hr>", unsafe_allow_html=True)

        # Gi·∫£ s·ª≠ df_stock l√† DataFrame ch·ª©a d·ªØ li·ªáu th·ªã tr∆∞·ªùng v·ªõi c√°c c·ªôt 'time', 'open', 'close', 'volume'
        plot_combined_charts(df_stock, sma_windows, ema_windows)
            
    with t4:
        st.subheader("Ph√¢n T√≠ch K·∫øt Qu·∫£ T√†i Ch√≠nh")

        # T·∫°o c√°c expander ƒë·ªÉ ph√°t hi·ªán v√† hi·ªÉn th·ªã t·ª´ng bi·ªÉu ƒë·ªì
        with st.expander("C·∫•u Tr√∫c V·ªën"):
            plot_capital_structure(df_balance)

        with st.expander("C·∫•u Tr√∫c T√†i S·∫£n"):
            plot_asset_structure(df_balance)

        with st.expander("B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n"):
            plot_accounting_balance(df_balance)

        with st.expander("K·∫øt Qu·∫£ Kinh Doanh"):
            plot_business_results(df_income_statement)

        with st.expander("L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá"):
            plot_cash_flow(df_cash_flow)

        with st.expander("C·∫•u Tr√∫c L·ª£i Nhu·∫≠n"):
            plot_profit_structure(df_income_statement)

        # Th√™m m·ªôt s·ªë th√¥ng b√°o h·ªó tr·ª£, nh·∫Øc nh·ªü ng∆∞·ªùi d√πng v·ªÅ n·ªôi dung
        st.markdown("B·∫°n c√≥ th·ªÉ m·ªü c√°c ph·∫ßn ƒë·ªÉ xem bi·ªÉu ƒë·ªì chi ti·∫øt h∆°n. Di chuy·ªÉn chu·ªôt qua c√°c ph·∫ßn ƒë·ªÉ xem th√¥ng tin r√µ h∆°n.")
    
        
    with t5:
    # T·∫°o khung cho m·ªói kh·ªëi th√¥ng tin
        st.markdown("<h2 style='text-align: center;'>Th√¥ng Tin C√¥ng Ty</h2>", unsafe_allow_html=True)

        # Ban l√£nh ƒë·∫°o
        with st.container():
            st.markdown("<h3 style='color: #4B0082;'>Ban L√£nh ƒê·∫°o</h3>", unsafe_allow_html=True)
            officers_info = get_officers_info(code)
            if officers_info is None or officers_info.empty:
                st.warning("Kh√¥ng c√≥ th√¥ng tin ban l√£nh ƒë·∫°o.")
            else:
                # T·∫°m b·ªè styling ƒë·ªÉ ki·ªÉm tra
                st.dataframe(officers_info)  # Th·ª≠ m√† kh√¥ng c√≥ highlighting
                # N·∫øu mu·ªën gi·ªØ highlighting:
                # st.dataframe(officers_info.style.highlight_max(axis=0))

        # C√¥ng ty con
        with st.container():
            st.markdown("<h3 style='color: #4B0082;'>C√¥ng Ty Con</h3>", unsafe_allow_html=True)
            subsidiaries_info = get_subsidiaries_info(code)
            if subsidiaries_info is None or subsidiaries_info.empty:
                st.warning("Kh√¥ng c√≥ th√¥ng tin v·ªÅ c√¥ng ty con.")
            else:
                # T·∫°m b·ªè styling ƒë·ªÉ ki·ªÉm tra
                st.dataframe(subsidiaries_info)  # Th·ª≠ m√† kh√¥ng c√≥ highlighting

        # C·ªï ƒë√¥ng l·ªõn
        with st.container():
            st.markdown("<h3 style='color: #4B0082;'>C·ªï ƒê√¥ng L·ªõn</h3>", unsafe_allow_html=True)
            shareholders_info = get_shareholders_info(code)
            if shareholders_info is None or shareholders_info.empty:
                st.warning("Kh√¥ng c√≥ th√¥ng tin v·ªÅ c·ªï ƒë√¥ng l·ªõn.")
            else:
                # T·∫°m b·ªè styling ƒë·ªÉ ki·ªÉm tra
                st.dataframe(shareholders_info)  # Th·ª≠ m√† kh√¥ng c√≥ highlighting
  
    with t6:
        cdkt, kqkd, lctt = st.tabs(["B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n", "B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh", "B√°o C√°o L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá"])

        with cdkt:
            # In ƒë·∫≠m t√™n c·ªôt
            styled_balance = df_balance.style.set_properties(**{'font-weight': 'bold'}, subset=df_balance.columns)
            st.dataframe(styled_balance.highlight_max(axis=0))  # Highlight maximum values

            # Cung c·∫•p t√πy ch·ªçn t·∫£i xu·ªëng
            csv_balance = df_balance.to_csv(index=False).encode('utf-8')
            st.download_button("T·∫£i B·∫£ng C√¢n ƒê·ªëi K·∫ø To√°n", csv_balance, "balance_sheet.csv", "text/csv")

        with kqkd:
             # In ƒë·∫≠m t√™n c·ªôt
            styled_income = df_income_statement.style.set_properties(**{'font-weight': 'bold'}, subset=df_income_statement.columns)
            st.dataframe(styled_income.highlight_max(axis=0))

            # Cung c·∫•p t√πy ch·ªçn t·∫£i xu·ªëng
            csv_income = df_income_statement.to_csv(index=False).encode('utf-8')
            st.download_button("T·∫£i B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh", csv_income, "income_statement.csv", "text/csv")

        with lctt:
            # In ƒë·∫≠m t√™n c·ªôt
            styled_cash_flow = df_cash_flow.style.set_properties(**{'font-weight': 'bold'}, subset=df_cash_flow.columns)
            st.dataframe(styled_cash_flow.highlight_max(axis=0))

            # Cung c·∫•p t√πy ch·ªçn t·∫£i xu·ªëng
            csv_cash_flow = df_cash_flow.to_csv(index=False).encode('utf-8')
            st.download_button("T·∫£i B√°o C√°o L∆∞u Chuy·ªÉn Ti·ªÅn T·ªá", csv_cash_flow, "cash_flow_statement.csv", "text/csv")
        
if __name__ == "__main__":
    main()
