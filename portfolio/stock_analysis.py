import pandas as pd
import numpy as np
from datetime import datetime
from vnstock import Vnstock

YEARS = 5  # S·ª≠ d·ª•ng 5 nƒÉm l√†m kho·∫£ng th·ªùi gian c∆° b·∫£n

def calculate_cagr(price_series):
    """
    T√≠nh CAGR (Compound Annual Growth Rate) ‚Äì L√£i k√©p trung b√¨nh h√†ng nƒÉm.
    """
    if len(price_series) < 250:
        return np.nan
    start_price = price_series.iloc[0]
    end_price = price_series.iloc[-1]
    if start_price <= 0 or np.isnan(start_price):
        return np.nan
    return ((end_price / start_price) ** (1 / YEARS) - 1) * 100

def compute_beta(data, stock, market):
    """
    T√≠nh Beta c·ªßa c·ªï phi·∫øu so v·ªõi th·ªã tr∆∞·ªùng.
    """
    log_returns = np.log(data / data.shift(1))
    cov = log_returns.cov() * 250
    cov_with_market = cov.loc[stock, market]
    market_var = log_returns[market].var() * 250
    return cov_with_market / market_var if market_var > 0 else np.nan

def calculate_vnindex_annual_return(vnindex_prices):
    """
    T√≠nh t·ª∑ su·∫•t sinh l·ªùi trung b√¨nh h√†ng nƒÉm c·ªßa VNINDEX.
    """
    if len(vnindex_prices) < 250:
        return np.nan
    current_price = vnindex_prices.iloc[-1]
    past_price = vnindex_prices.iloc[0]
    annual_return = ((current_price / past_price) ** (1 / YEARS) - 1) * 100
    return annual_return

def compute_capm(data, stock, market, riskfree=0.03):
    """
    T√≠nh t·ª∑ su·∫•t sinh l·ªùi theo m√¥ h√¨nh CAPM.
    """
    beta = compute_beta(data, stock, market)
    market_annual_return = calculate_vnindex_annual_return(data[market])
    risk_premium = market_annual_return - riskfree
    return riskfree + beta * risk_premium if beta is not np.nan else np.nan

def generate_stock_analysis(symbols, start_date, end_date, view_dict, confidence_dict):
    """
    L·∫•y d·ªØ li·ªáu gi√° c·ªï phi·∫øu, t√≠nh to√°n c√°c ch·ªâ s·ªë t√†i ch√≠nh (CAGR, CAPM, Beta)
    v√† k·∫øt h·ª£p v·ªõi d·ªØ li·ªáu l·ª£i nhu·∫≠n k·ª≥ v·ªçng, m·ª©c ƒë·ªô t·ª± tin.
    
    Tr·∫£ v·ªÅ DataFrame ch·ª©a c√°c th√¥ng s·ªë cho t·ª´ng m√£ c·ªï phi·∫øu.
    """
    market_symbol = 'VNINDEX'
    close_prices = pd.DataFrame()

    for symbol in symbols + [market_symbol]:
        try:
            print(f"üì• ƒêang t·∫£i d·ªØ li·ªáu cho {symbol}...")
            stock = Vnstock().stock(symbol=symbol, source="VCI")
            df = stock.quote.history(start=start_date, end=end_date, interval='1D')
            if df.empty:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho {symbol}.")
                continue
            df['time'] = pd.to_datetime(df['time'])
            df.set_index('time', inplace=True)
            close_prices[symbol] = df['close']
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu {symbol}: {e}")
    
    if close_prices.empty or market_symbol not in close_prices.columns:
        raise ValueError("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t·∫£i v·ªÅ th√†nh c√¥ng ho·∫∑c d·ªØ li·ªáu VNINDEX kh√¥ng kh·∫£ d·ª•ng!")
    
    result_df = pd.DataFrame(index=symbols, columns=[
        "CAGR (%)", "CAPM(%)", "Beta", "L·ª£i nhu·∫≠n k·ª≥ v·ªçng (%)", "M·ª©c ƒë·ªô t·ª± tin (%)"
    ])
    
    for symbol in symbols:
        if symbol not in close_prices.columns:
            continue
        cagr = calculate_cagr(close_prices[symbol])
        stock_annual_return = compute_capm(close_prices, symbol, market_symbol)
        beta = compute_beta(close_prices, symbol, market_symbol)
        expected_return = view_dict.get(symbol, np.nan) * 100
        confidence = confidence_dict.get(symbol, np.nan) * 100
        result_df.loc[symbol] = [cagr, stock_annual_return, beta, expected_return, confidence]
    
    return result_df
