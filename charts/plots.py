# charts/plots.py
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import streamlit as st
import inspect
import numpy as np
from plotly.subplots import make_subplots




def plot_stock_vs_vnindex(df_stock, df_vnindex, code):
    """
    V·∫Ω bi·ªÉu ƒë·ªì bi·∫øn ƒë·ªông gi√° c·ªï phi·∫øu so v·ªõi VN-Index.

    Tham s·ªë:
    - df_stock (pd.DataFrame): D·ªØ li·ªáu gi√° c·ªï phi·∫øu (c√≥ c·ªôt 'time', 'close').
    - df_vnindex (pd.DataFrame): D·ªØ li·ªáu VN-Index (c√≥ c·ªôt 'time', 'close').
    - code (str): M√£ c·ªï phi·∫øu c·∫ßn so s√°nh.

    Tr·∫£ v·ªÅ:
    - Bi·ªÉu ƒë·ªì Plotly hi·ªÉn th·ªã tr√™n Streamlit.
    """

    # üîπ Ch·ªâ l·∫•y c·ªôt 'time' v√† 'close', ƒë·ªïi t√™n ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    df_stock_close = df_stock[['time', 'close']].rename(columns={'close': f'{code}_close'})
    df_vnindex_close = df_vnindex[['time', 'close']].rename(columns={'close': 'VN-Index_close'})

    # Merge d·ªØ li·ªáu theo 'time'
    df_combined = df_stock_close.merge(df_vnindex_close, on='time', how='inner')

    # üîπ ƒê·∫∑t l·∫°i index theo 'time'
    df_combined.set_index('time', inplace=True)

    # üîπ T√≠nh % thay ƒë·ªïi so v·ªõi ng√†y ƒë·∫ßu ti√™n
    df_combined = (df_combined / df_combined.iloc[0] - 1) * 100

    # üîπ V·∫Ω bi·ªÉu ƒë·ªì b·∫±ng Plotly
    fig = go.Figure()
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m

    fig.add_trace(go.Scatter(
        x=df_combined.index,
        y=df_combined[f'{code}_close'],
        mode='lines',
        name=f"C·ªï phi·∫øu {code}",
        line=dict(color='orange', width=2)
    ))

    fig.add_trace(go.Scatter(
        x=df_combined.index,
        y=df_combined['VN-Index_close'],
        mode='lines',
        name="VN-Index",
        line=dict(color='blue', width=2)
    ))

    fig.update_layout(
        title=f"Bi·∫øn ƒë·ªông gi√° {code} so v·ªõi VN-Index",
        xaxis_title="Th·ªùi gian",
        yaxis_title="Thay ƒë·ªïi (%)",
        template="plotly_dark",
        hovermode="x unified",
        legend=dict(x=0, y=1)
    )

    st.plotly_chart(fig, use_container_width=True, key=f"chart_{function_name}")


def plot_price_volume(df):
    # Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi c·ªôt 'Date' sang d·∫°ng datetime n·∫øu ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng
    if not pd.api.types.is_datetime64_any_dtype(df['time']):
        df['time'] = pd.to_datetime(df['time'])

    # Lo·∫°i b·ªè gi√° tr·ªã NaN trong 'close' v√† 'volume'
    df = df.dropna(subset=['close', 'volume'])

    # T·∫°o figure
    fig = go.Figure()

    # V·∫Ω ƒë∆∞·ªùng gi√° ƒë√≥ng c·ª≠a (Close Price)
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['close'],
        mode='lines',
        name='gi√° ƒë√≥ng c·ª≠a',
        line=dict(color='blue', width=2)  # T√πy ch·ªânh m√†u s·∫Øc v√† ƒë·ªô r·ªông ƒë∆∞·ªùng
    ))

    # X√°c ƒë·ªãnh m√†u s·∫Øc cho bi·ªÉu ƒë·ªì c·ªôt (Volume)
    colors = ['red' if df['close'].iloc[i] > df['close'].iloc[i - 1] else 'green' for i in range(1, len(df))]
    colors.insert(0, 'green')  # M·∫∑c ƒë·ªãnh m√†u xanh cho phi√™n ƒë·∫ßu ti√™n

    # V·∫Ω bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng giao d·ªãch (Volume)
    fig.add_trace(go.Bar(
        x=df['time'], y=df['volume'],
        name='kh·ªëi l∆∞·ª£ng giao d·ªãch',
        yaxis='y2',
        marker=dict(color=colors),
        hovertemplate='%{y}k'
    ))

    # C·∫•u h√¨nh tr·ª•c v√† layout
    fig.update_layout(
        #title="Stock Price & Volume",
        #xaxis_title="Date",
        #yaxis=dict(title="Close Price"),
        yaxis2=dict(overlaying="y", side="right"),
        hovermode="x unified",
        showlegend=True
    )

    # Th√™m thanh tr∆∞·ª£t th·ªùi gian v√† n√∫t ch·ªçn kho·∫£ng th·ªùi gian
    fig.update_xaxes(
        title_text='Date', rangeslider_visible=False,
        rangeselector=dict(
            buttons=[
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=3, label="3m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(count=5, label="5y", step="year", stepmode="backward"),
                dict(step="all")
            ]
        )
    )
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")


def plot_rsi_chart(data):
    delta = data['close'].diff()
    up = delta.where(delta > 0, 0)
    down = -delta.where(delta < 0, 0)

    avg_gain = up.rolling(window=14, min_periods=1).mean()
    avg_loss = down.rolling(window=14, min_periods=1).mean()
    rs = avg_gain / avg_loss
    data["RSI"] = 100 - (100 / (1 + rs))

    
    fig = go.Figure()
    # ƒê∆∞·ªùng RSI
    fig.add_trace(go.Scatter(
        x=data.index, y=data["RSI"],
        mode="lines", name="RSI",
        line=dict(color="purple", width=1)
    ))

    # Overbought & Oversold
    fig.add_trace(go.Scatter(
        x=data.index, y=[70] * len(data),
        mode="lines", name="Overbought (70)",
        line=dict(color="red", width=1, dash="dash")
    ))
    fig.add_trace(go.Scatter(
        x=data.index, y=[30] * len(data),
        mode="lines", name="Oversold (30)",
        line=dict(color="blue", width=1, dash="dash")
    ))
  
    fig.update_layout(
        hovermode='x unified',
        template="plotly_dark"
    )
    fig.update_xaxes(rangeslider_visible=False, rangeselector=dict(
        buttons=[
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=3, label="3m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(count=5, label="5y", step="year", stepmode="backward"),
            dict(step="all")
        ]
    ))
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_macd_chart(data):
    data['ema_12'] = data['close'].ewm(span=12, adjust=False).mean()
    data['ema_26'] = data['close'].ewm(span=26, adjust=False).mean()
    data['macd'] = data['ema_12'] - data['ema_26']
    data['signal'] = data['macd'].ewm(span=9, adjust=False).mean()
    data['histogram'] = data['macd'] - data['signal']
    
    fig = go.Figure()

    # ƒê∆∞·ªùng MACD
    fig.add_trace(go.Scatter(
        x=data.index, y=data["macd"],
        mode="lines", name="MACD",
        line=dict(color="blue", width=1.5)
    ))

    # ƒê∆∞·ªùng Signal
    fig.add_trace(go.Scatter(
        x=data.index, y=data["signal"],
        mode="lines", name="Signal",
        line=dict(color="orange", width=1.5)
    ))

    # Histogram
    fig.add_trace(go.Bar(
        x=data.index, y=data["histogram"],
        name="Histogram",
        marker=dict(
            color=['green' if v > 0 else 'red' for v in data["histogram"]],
        )
    ))
    
    fig.update_layout(
        hovermode='x unified',
        template="plotly_dark"
    )
    fig.update_xaxes(rangeslider_visible=False, rangeselector=dict(
        buttons=[
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=3, label="3m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(count=5, label="5y", step="year", stepmode="backward"),
            dict(step="all")
        ]
    ))
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")


def plot_combined_charts(df, sma_windows, ema_windows):
    """
    V·∫Ω bi·ªÉu ƒë·ªì k·∫øt h·ª£p g·ªìm 3 h√†ng:
      - H√†ng 1: Gi√° ƒë√≥ng c·ª≠a v·ªõi Bollinger Bands, SMA, EMA v√† Volume.
      - H√†ng 2: MACD chart.
      - H√†ng 3: RSI chart.
      
    Chi·ªÅu cao: row1 chi·∫øm 60%, row2 v√† row3 chi·∫øm 20% m·ªói.
    
    Y√™u c·∫ßu DataFrame df c√≥ c√°c c·ªôt:
      - time: th·ªùi gian (datetime)
      - open: gi√° m·ªü c·ª≠a (d√πng ƒë·ªÉ x√°c ƒë·ªãnh m√†u Volume)
      - close: gi√° ƒë√≥ng c·ª≠a
      - volume: kh·ªëi l∆∞·ª£ng giao d·ªãch
    Parameters:
      - sma_windows: danh s√°ch chu k·ª≥ SMA (d·∫°ng string, v√≠ d·ª•: ['10', '20'])
      - ema_windows: danh s√°ch chu k·ª≥ EMA (d·∫°ng string, v√≠ d·ª•: ['10', '20'])
    """
    # Chuy·ªÉn ƒë·ªïi c·ªôt time sang datetime n·∫øu c·∫ßn v√† s·∫Øp x·∫øp theo time
    df = df.sort_values(by='time').copy()
    if not np.issubdtype(df['time'].dtype, np.datetime64):
        df['time'] = pd.to_datetime(df['time'])
    
    # ---------------------------
    # T√≠nh to√°n c√°c ch·ªâ b√°o:
    # --- Bollinger Bands (s·ª≠ d·ª•ng c·ª≠a s·ªï 20, ƒë·ªô l·ªách chu·∫©n 2)
    bb_window = 20
    bb_std = 2
    df['BB_Middle'] = df['close'].rolling(window=bb_window, min_periods=1).mean()
    df['BB_std'] = df['close'].rolling(window=bb_window, min_periods=1).std()
    df['BB_Upper'] = df['BB_Middle'] + bb_std * df['BB_std']
    df['BB_Lower'] = df['BB_Middle'] - bb_std * df['BB_std']
    
    # --- MACD (EMA12, EMA26, Signal EMA9)
    ema12 = df['close'].ewm(span=12, adjust=False).mean()
    ema26 = df['close'].ewm(span=26, adjust=False).mean()
    df['MACD'] = ema12 - ema26
    df['Signal'] = df['MACD'].ewm(span=9, adjust=False).mean()
    df['Histogram'] = df['MACD'] - df['Signal']
    
    # --- RSI (chu k·ª≥ 14)
    delta = df['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14, min_periods=14).mean()
    avg_loss = loss.rolling(window=14, min_periods=14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))
    
    # ---------------------------
    # T·∫°o figure v·ªõi 3 h√†ng, row_heights: row1=60%, row2=20%, row3=20%
    fig = make_subplots(
        rows=3, cols=1,
        shared_xaxes=True,
        vertical_spacing=0.03,
        row_heights=[0.6, 0.2, 0.2],
        specs=[[{"secondary_y": True}],
               [{}],
               [{}]]
    )
    
    # --- H√ÄNG 1: Gi√° v√† ch·ªâ b√°o, c√πng Volume tr√™n tr·ª•c ph·ª• ---
    # Gi√° ƒë√≥ng c·ª≠a
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['close'],
        mode="lines", name="Gi√° ƒë√≥ng c·ª≠a",
        line=dict(color="blue", width=2)
    ), row=1, col=1, secondary_y=False)
    
    # SMA theo chu k·ª≥ ng∆∞·ªùi d√πng ch·ªçn
    for window in sma_windows:
        window_int = int(window)
        sma = df['close'].rolling(window=window_int, min_periods=1).mean()
        fig.add_trace(go.Scatter(
            x=df['time'], y=sma,
            mode="lines", name=f"SMA {window}",
            line=dict(width=1.5, dash="dot")
        ), row=1, col=1, secondary_y=False)
    
    # EMA theo chu k·ª≥ ng∆∞·ªùi d√πng ch·ªçn
    for window in ema_windows:
        window_int = int(window)
        ema = df['close'].ewm(span=window_int, adjust=False).mean()
        fig.add_trace(go.Scatter(
            x=df['time'], y=ema,
            mode="lines", name=f"EMA {window}",
            line=dict(width=1.5, dash="dot")
        ), row=1, col=1, secondary_y=False)
    
    # Bollinger Bands (Upper & Lower, ƒë∆∞·ªùng li√™n n√©t)
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['BB_Upper'],
        mode="lines", name="Bollinger Upper",
        line=dict(color="red", width=1, dash="solid")
    ), row=1, col=1, secondary_y=False)
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['BB_Lower'],
        mode="lines", name="Bollinger Lower",
        line=dict(color="green", width=1, dash="solid")
    ), row=1, col=1, secondary_y=False)
    
    # Volume: x√°c ƒë·ªãnh m√†u cho Volume (n·∫øu close >= open -> xanh, ng∆∞·ª£c l·∫°i -> ƒë·ªè)
    vol_colors = ['green' if row['close'] >= row['open'] else 'red' for _, row in df.iterrows()]
    fig.add_trace(go.Bar(
        x=df['time'], y=df['volume'],
        name="Volume",
        marker=dict(color=vol_colors),
        opacity=0.5
    ), row=1, col=1, secondary_y=True)
    
    # --- H√ÄNG 2: MACD ---
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['MACD'],
        mode="lines", name="MACD",
        line=dict(color="white", width=1)
    ), row=2, col=1)
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['Signal'],
        mode="lines", name="Signal",
        line=dict(color="orange", width=1)
    ), row=2, col=1)
    hist_colors = ['green' if val >= 0 else 'red' for val in df['Histogram']]
    fig.add_trace(go.Bar(
        x=df['time'], y=df['Histogram'],
        name="Histogram",
        marker=dict(color=hist_colors),
        opacity=0.5
    ), row=2, col=1)
    
    # --- H√ÄNG 3: RSI ---
    fig.add_trace(go.Scatter(
        x=df['time'], y=df['RSI'],
        mode="lines", name="RSI",
        line=dict(color="cyan", width=1.5)
    ), row=3, col=1)
    # Th√™m ƒë∆∞·ªùng tham chi·∫øu 70 v√† 30 cho RSI
    fig.add_trace(go.Scatter(
        x=df['time'], y=[70]*len(df),
        mode="lines", name="Overbought (70)",
        line=dict(color="red", width=1, dash="dash")
    ), row=3, col=1)
    fig.add_trace(go.Scatter(
        x=df['time'], y=[30]*len(df),
        mode="lines", name="Oversold (30)",
        line=dict(color="green", width=1, dash="dash")
    ), row=3, col=1)
    
    # --- C·∫•u h√¨nh layout t·ªïng th·ªÉ ---
    fig.update_layout(
        template="plotly_dark",
        title="Bi·ªÉu ƒë·ªì k·∫øt h·ª£p: Gi√°, MACD v√† RSI",
        hovermode="x unified",
        legend=dict(orientation="h", yanchor="bottom", y=1, xanchor="right", x=1)
    )
    
    # C·∫•u h√¨nh tr·ª•c x (ch·ªâ hi·ªÉn th·ªã m·ªôt rangeslider v√† rangeselector d√πng chung cho t·∫•t c·∫£)
    fig.update_xaxes(
        title_text="Date",
        rangeslider=dict(visible=False),
        rangeselector=dict(
            buttons=[
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=3, label="3m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(count=5, label="5y", step="year", stepmode="backward"),
                dict(step="all")
            ]
        )
    )
    
    # C·∫•u h√¨nh tr·ª•c y cho t·ª´ng h√†ng
    fig.update_yaxes(title_text="Price", row=1, col=1, secondary_y=False)
    fig.update_yaxes(title_text="Volume", row=1, col=1, secondary_y=True)
    fig.update_yaxes(title_text="MACD", row=2, col=1)
    fig.update_yaxes(title_text="RSI", row=3, col=1)
    
    st.plotly_chart(fig, use_container_width=True, key=f"chart_{inspect.currentframe().f_code.co_name}")


# Bi·ªÉu ƒë·ªì c√¢n ƒë·ªëi k·∫ø to√°n
def plot_accounting_balance(df):
    fig = go.Figure()

    fig.add_trace(go.Bar(x=df.index, y=df['T·ªîNG C·ªòNG T√ÄI S·∫¢N (ƒë·ªìng)'], name='T·ªïng t√†i s·∫£n', marker_color=px.colors.qualitative.Plotly[6]))
    fig.add_trace(go.Bar(x=df.index, y=df['V·ªêN CH·ª¶ S·ªû H·ªÆU (ƒë·ªìng)'], name='V·ªën ch·ªß s·ªü h·ªØu', marker_color=px.colors.qualitative.Plotly[2]))
    fig.add_trace(go.Scatter(x=df.index, y=df['N·ª¢ PH·∫¢I TR·∫¢ (ƒë·ªìng)'] / df['T·ªîNG C·ªòNG T√ÄI S·∫¢N (ƒë·ªìng)'],
                             mode='lines+markers', name='T·ªâ l·ªá n·ª£', yaxis='y2', marker_color=px.colors.qualitative.Plotly[9]))
    fig.update_layout(title='C√¢n ƒë·ªëi k·∫ø to√°n', barmode='group', yaxis2=dict(overlaying='y', side='right'))
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")


# Bi·ªÉu ƒë·ªì k·∫øt qu·∫£ kinh doanh
def plot_business_results(df):
    fig = go.Figure()
    fig.add_trace(go.Bar(x=df.index, y=df['Doanh thu thu·∫ßn'], name='Doanh thu thu·∫ßn', marker_color='rgb(250,50,50)'))
    fig.add_trace(go.Bar(x=df.index, y=df['L·ª£i nhu·∫≠n sau thu·∫ø c·ªßa C·ªï ƒë√¥ng c√¥ng ty m·∫π (ƒë·ªìng)'], name='L·ª£i nhu·∫≠n sau thu·∫ø', marker_color='rgb(0,200,0)'))
    fig.update_layout(title='K·∫øt qu·∫£ kinh doanh', barmode='group')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

# Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn
def plot_cash_flow(df):
    colors = ['rgb(250,50, 50)', 'rgb(0, 200,0)', 'rgb(50, 50, 255)']
    fig = go.Figure()
    fig.add_trace(go.Bar(x=df.index, y=df['L∆∞u chuy·ªÉn ti·ªÅn t·ª´ ho·∫°t ƒë·ªông t√†i ch√≠nh'], name='Hƒê t√†i ch√≠nh', marker_color=colors[0]))
    fig.add_trace(go.Bar(x=df.index, y=df['L∆∞u chuy·ªÉn ti·ªÅn t·ªá r√≤ng t·ª´ c√°c ho·∫°t ƒë·ªông SXKD'], name='Hƒê kinh doanh', marker_color=colors[1]))
    fig.add_trace(go.Bar(x=df.index, y=df['L∆∞u chuy·ªÉn t·ª´ ho·∫°t ƒë·ªông ƒë·∫ßu t∆∞'], name='Hƒê ƒë·∫ßu t∆∞', marker_color=colors[2]))
    fig.update_layout(title='D√≤ng ti·ªÅn', barmode='group')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")


def plot_capital_structure(df_balance):
    df_balance = df_balance.reset_index()
    df_melted = pd.melt(df_balance, id_vars=['NƒÉm'], value_vars=[
        'N·ª¢ PH·∫¢I TR·∫¢ (ƒë·ªìng)', 'N·ª£ ng·∫Øn h·∫°n (ƒë·ªìng)', 'N·ª£ d√†i h·∫°n (ƒë·ªìng)',
        'V·ªêN CH·ª¶ S·ªû H·ªÆU (ƒë·ªìng)', 'V·ªën g√≥p c·ªßa ch·ªß s·ªü h·ªØu (ƒë·ªìng)',
        'Vay v√† n·ª£ thu√™ t√†i ch√≠nh d√†i h·∫°n (ƒë·ªìng)',
        'Vay v√† n·ª£ thu√™ t√†i ch√≠nh ng·∫Øn h·∫°n (ƒë·ªìng)',
        'T·ªîNG C·ªòNG NGU·ªíN V·ªêN (ƒë·ªìng)'
    ], var_name='Lo·∫°i', value_name='Gi√° tr·ªã')
    
    df_balance['T·ª∑ s·ªë N·ª£ vay tr√™n T·ªïng ngu·ªìn v·ªën'] = (
        df_balance['Vay v√† n·ª£ thu√™ t√†i ch√≠nh ng·∫Øn h·∫°n (ƒë·ªìng)'] +
        df_balance['Vay v√† n·ª£ thu√™ t√†i ch√≠nh d√†i h·∫°n (ƒë·ªìng)']) / df_balance['T·ªîNG C·ªòNG NGU·ªíN V·ªêN (ƒë·ªìng)']
    
    
    
    df_melted.sort_values(by='NƒÉm', inplace=True)
    fig = go.Figure()
    for loai in df_melted['Lo·∫°i'].unique():
        fig.add_trace(go.Bar(
            x=df_melted[df_melted['Lo·∫°i'] == loai]['NƒÉm'],
            y=df_melted[df_melted['Lo·∫°i'] == loai]['Gi√° tr·ªã'],
            name=loai
        ))
    fig.add_trace(go.Scatter(x=df_balance['NƒÉm'], y=df_balance['T·ª∑ s·ªë N·ª£ vay tr√™n T·ªïng ngu·ªìn v·ªën'], mode='lines+markers',
                             name='T·ªâ l·ªá N·ª£ vay/TTS', yaxis='y2'))
    fig.update_layout(yaxis2=dict(anchor='x', overlaying='y', side='right'))
    fig.update_layout(
        barmode='stack',
        xaxis_tickmode='linear',
        xaxis_title='NƒÉm',
        yaxis_title='Gi√° tr·ªã (t·ª∑ ƒë·ªìng)',
        title='NGU·ªíN V·ªêN',
        updatemenus=[{
            'active': 0,
            'buttons': [
                {'label': 'TƒÉng', 'method': 'relayout', 'args': ['barmode', 'stack']},
                {'label': 'TƒÉng c∆∞·ªùng', 'method': 'relayout', 'args': ['barmode', 'group']}
            ],
            'direction': 'down',
            'showactive': True,
            'x': 1.05,
            'xanchor': 'left',
            'y': 1.2,
            'yanchor': 'top'
        }]
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")


def plot_asset_structure(df_balance):
    df_balance = df_balance.reset_index()

    df_balance['Ti·ªÅn/TTS'] = df_balance['T√ÄI S·∫¢N NG·∫ÆN H·∫†N (ƒë·ªìng)'] / df_balance['T·ªîNG C·ªòNG T√ÄI S·∫¢N (ƒë·ªìng)']
    df_melted = pd.melt(df_balance, id_vars=['NƒÉm'], value_vars=[
       'T√ÄI S·∫¢N NG·∫ÆN H·∫†N (ƒë·ªìng)', 'Ti·ªÅn v√† t∆∞∆°ng ƒë∆∞∆°ng ti·ªÅn (ƒë·ªìng)',
        'C√°c kho·∫£n ph·∫£i thu ng·∫Øn h·∫°n (ƒë·ªìng)', 'H√†ng t·ªìn kho r√≤ng',
        'T√ÄI S·∫¢N D√ÄI H·∫†N (ƒë·ªìng)', 'T√†i s·∫£n c·ªë ƒë·ªãnh (ƒë·ªìng)',
        'ƒê·∫ßu t∆∞ d√†i h·∫°n (ƒë·ªìng)', 'T·ªîNG C·ªòNG T√ÄI S·∫¢N (ƒë·ªìng)'
    ], var_name='Lo·∫°i', value_name='Gi√° tr·ªã')
    df_melted.sort_values(by='NƒÉm', inplace=True)
    fig = go.Figure()
    for loai in df_melted['Lo·∫°i'].unique():
        fig.add_trace(go.Bar(
            x=df_melted[df_melted['Lo·∫°i'] == loai]['NƒÉm'],
            y=df_melted[df_melted['Lo·∫°i'] == loai]['Gi√° tr·ªã'],
            name=loai
        ))
    fig.add_trace(go.Scatter(
        x=df_balance['NƒÉm'],
        y=df_balance['Ti·ªÅn/TTS'],
        mode='lines+markers',
        name='Ti·ªÅn/TTS', yaxis='y2'))
    fig.update_layout(yaxis2=dict(anchor='x', overlaying='y', side='right'))
    fig.update_layout(
        barmode='stack',
        xaxis_tickmode='linear',
        xaxis_title='NƒÉm',
        yaxis_title='Gi√° tr·ªã (ƒë·ªìng)',
        title='T√ÄI S·∫¢N',
        updatemenus=[{
            'active': 0,
            'buttons': [
                {'label': 'TƒÉng', 'method': 'relayout', 'args': ['barmode', 'stack']},
                {'label': 'TƒÉng c∆∞·ªùng', 'method': 'relayout', 'args': ['barmode', 'group']}
            ],
            'direction': 'down',
            'showactive': True,
            'x': 1.05,
            'xanchor': 'left',
            'y': 1.2,
            'yanchor': 'top'
        }]
    )



def plot_profit_structure(df_kqkd):
    df_kqkd = df_kqkd.reset_index()
    fig = go.Figure()

    fig.add_trace(go.Bar(x=df_kqkd['NƒÉm'], y=df_kqkd['Thu nh·∫≠p t√†i ch√≠nh'],
                         name='L√£i/l·ªó t·ª´ ho·∫°t ƒë·ªông t√†i ch√≠nh', marker_color=px.colors.qualitative.Plotly[1]))
    
    fig.add_trace(go.Bar(x=df_kqkd['NƒÉm'], y=df_kqkd['L√£i/L·ªó t·ª´ ho·∫°t ƒë·ªông kinh doanh'],
                         name='L√£i/l·ªó t·ª´ ho·∫°t ƒë·ªông kinh doanh', marker_color=px.colors.qualitative.Plotly[2]))
                    
    fig.add_trace(go.Bar(x=df_kqkd['NƒÉm'], y=df_kqkd['L·ª£i nhu·∫≠n kh√°c'],
                         name='L·ª£i nhu·∫≠n kh√°c', marker_color=px.colors.qualitative.Plotly[4]))
    
    fig.update_layout(
        title='PH√ÇN T√çCH L·ª¢I NHU·∫¨N',
        xaxis_title='NƒÉm',
        barmode='group',
        hovermode='x',
        yaxis2=dict(overlaying='y', side='right', showgrid=False, showline=False, zeroline=False, showticklabels=True)
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_financial_ratios(df_insights):
    fig = go.Figure()
    fig.add_trace(go.Bar(x=df_insights['NƒÉm'], y=df_insights['ROA']*100, name='ROA', marker_color=px.colors.qualitative.Plotly[8]))
    fig.add_trace(go.Bar(x=df_insights['NƒÉm'], y=df_insights['ROE']*100, name='ROE', marker_color=px.colors.qualitative.Plotly[2]))
    fig.update_layout(
        title='ROE-ROA',
        xaxis_title='NƒÉm',
        barmode='group',
        hovermode='x'
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_operating_efficiency(cstc):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=cstc['NƒÉm'], y=cstc['S·ªë ng√†y thu ti·ªÅn b√¨nh qu√¢n'], mode='lines+markers', name='Ph·∫£i thu', marker_color=px.colors.qualitative.Plotly[2]))
    fig.add_trace(go.Scatter(x=cstc['NƒÉm'], y=cstc['S·ªë ng√†y t·ªìn kho b√¨nh qu√¢n'], mode='lines+markers', name='T·ªìn kho', marker_color=px.colors.qualitative.Plotly[3]))
    fig.add_trace(go.Scatter(x=cstc['NƒÉm'], y=cstc['S·ªë ng√†y thanh to√°n b√¨nh qu√¢n'], mode='lines+markers', name='Ph·∫£i tr·∫£', marker_color=px.colors.qualitative.Plotly[4]))
    fig.update_layout(
        title='HI·ªÜU QU·∫¢ HO·∫†T ƒê·ªòNG',
        xaxis_title='NƒÉm',
        yaxis_title='S·ªë ng√†y',
        legend_title='Ch·ªâ s·ªë',
        barmode='group',
        hovermode='x'
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_leverage_ratios(cstc):
    fig = go.Figure()
    fig.add_trace(go.Bar(x=cstc['NƒÉm'], y=cstc['N·ª£/VCSH'], name='N·ª£ tr√™n v·ªën ch·ªß s·ªü h·ªØu', marker_color=px.colors.qualitative.Plotly[4]))
    fig.add_trace(go.Bar(x=cstc['NƒÉm'], y=cstc['TSCƒê/VSCH'], name='T√†i s·∫£n c·ªë ƒë·ªãnh tr√™n v·ªën ch·ªß s·ªü h·ªØu', marker_color=px.colors.qualitative.Plotly[5]))
    fig.update_layout(
        title='H·ªÜ S·ªê ƒê√íN B·∫®Y',
        xaxis_title='NƒÉm',
        barmode='group',
        hovermode='x',
        yaxis2=dict(overlaying='y', side='right', showgrid=False, showline=False, zeroline=False, showticklabels=True)
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_pe_ratio(cstc):
    fig = go.Figure()
    fig.add_trace(go.Bar(x=cstc['NƒÉm'], y=cstc['EPS'], name='EPS', marker_color=px.colors.qualitative.Plotly[6]))
    fig.add_trace(go.Scatter(x=cstc['NƒÉm'], y=cstc['P/E'], mode='lines+markers', name='P/E', yaxis='y2', marker_color=px.colors.qualitative.Plotly[1]))
    fig.update_layout(
        title='CH·ªà S·ªê ƒê·ªäNH GI√Å P/E',
        xaxis_title='NƒÉm',
        barmode='group',
        hovermode='x',
        yaxis2=dict(overlaying='y', side='right', showgrid=False, showline=False, zeroline=False, showticklabels=True)
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_pb_ratio(cstc):
    fig = go.Figure()
    fig.add_trace(go.Bar(x=cstc['NƒÉm'], y=cstc['BVPS'], name='BVPS', marker_color=px.colors.qualitative.Plotly[5]))
    fig.add_trace(go.Scatter(x=cstc['NƒÉm'], y=cstc['P/B'], mode='lines+markers', name='P/B', yaxis='y2', marker_color=px.colors.qualitative.Plotly[2]))
    fig.update_layout(
        title='CH·ªà S·ªê ƒê·ªäNH GI√Å P/B',
        xaxis_title='NƒÉm',
        barmode='group',
        hovermode='x',
        yaxis2=dict(overlaying='y', side='right', showgrid=False, showline=False, zeroline=False, showticklabels=True)
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def dupont_analysis_plot(cstc):
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=cstc.index, y=cstc['Bi√™n l·ª£i nhu·∫≠n r√≤ng'] * 100, mode='lines+markers', yaxis='y2',
                             name='Bi√™n l·ª£i nhu·∫≠n r√≤ng(%)', marker_color=px.colors.qualitative.Plotly[6]))
    fig.add_trace(go.Scatter(x=cstc.index, y=cstc['ƒê√≤n b·∫©y t√†i ch√≠nh'], name='ƒê√≤n b·∫©y t√†i ch√≠nh', yaxis='y2',
                             marker_color=px.colors.qualitative.Plotly[9]))
    fig.add_trace(go.Scatter(x=cstc.index, y=cstc['V√≤ng quay t√†i s·∫£n'], name='V√≤ng quay t√†i s·∫£n', marker_color=px.colors.qualitative.Plotly[8]))
    fig.add_trace(go.Bar(x=cstc.index, y=cstc['ROE'] * 100, name='ROE(%)', yaxis='y2', marker_color=px.colors.qualitative.Plotly[2]))
    fig.update_layout(
        title='PH√ÇN T√çCH DUPONT',
        xaxis_title='NƒÉm',
        barmode='group',
        hovermode='x',
        yaxis2=dict(overlaying='y', side='right', showgrid=False, showline=False, zeroline=False, showticklabels=True)
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    function_name = inspect.currentframe().f_code.co_name  # L·∫•y t√™n h√†m
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√™n Streamlit
    st.plotly_chart(fig, use_container_width=True,key=f"chart_{function_name}")

def plot_portfolio_metrics(allocation_df):
    """
    V·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªï danh m·ª•c ƒë·∫ßu t∆∞.
    """
    if allocation_df.empty:
        st.write("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªï.")
        return
    
    fig = px.pie(allocation_df, names="M√£ c·ªï phi·∫øu", values="T·ª∑ tr·ªçng t·ªëi ∆∞u",
                 title="Ph√¢n b·ªï danh m·ª•c ƒë·∫ßu t∆∞")
    st.plotly_chart(fig)

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

def display_radar_chart(data, title, color):
    categories = data.columns[1:].tolist()
    values = data.iloc[0, 1:].tolist()
    values += values[:1]  # ƒê√≥ng v√≤ng radar
    categories += categories[:1]
    
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name=data.iloc[0, 0],
        line=dict(color=color, width=2)
    ))
    
    fig.update_layout(polar=dict(radialaxis=dict(visible=True)), title=title)
    st.plotly_chart(fig, use_container_width=True)

def display_bar_chart(data, x_col, y_col, title):
    fig = px.bar(data, x=x_col, y=y_col, title=title, text_auto=True, color=x_col)
    st.plotly_chart(fig, use_container_width=True)

def display_line_chart(data, x_col, y_col, title):
    fig = px.line(data, x=x_col, y=y_col, title=title, markers=True)
    st.plotly_chart(fig, use_container_width=True)

def visualize_analysis(screener_df, code):
    df_selected = screener_df[screener_df['ticker'] == code]
    if df_selected.empty:
        st.warning(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu {code}")
        return
    
    industry = df_selected['industry'].values[0]
    df_filtered = screener_df[screener_df['industry'] == industry]
    
    data1 = df_selected[['ticker', 'business_operation', 'business_model', 'financial_health', 'beta', 'stock_rating']]
    data1.columns = ['M√£', 'Hi·ªáu su·∫•t kinh doanh', 'M√¥ h√¨nh kinh doanh', 'S·ª©c kh·ªèe t√†i ch√≠nh', 'R·ªßi ro h·ªá th·ªëng', 'X·∫øp h·∫°ng ƒë·ªãnh gi√°']
    
    display_radar_chart(data1, f'Bi·ªÉu ƒë·ªì Radar - ƒê√°nh gi√° {code}', 'blue')
    
    with st.expander("üìä Hi·ªáu Qu·∫£ Ho·∫°t ƒê·ªông"):
        display_bar_chart(df_filtered, 'ticker', 'roe', 'ROE c·ªßa ng√†nh')
        display_bar_chart(df_filtered, 'ticker', 'gross_margin', 'Bi√™n l·ª£i nhu·∫≠n g·ªôp c·ªßa ng√†nh')
        display_bar_chart(df_filtered, 'ticker', 'net_margin', 'Bi√™n l·ª£i nhu·∫≠n r√≤ng c·ªßa ng√†nh')
        display_bar_chart(df_filtered, 'ticker', 'eps', 'EPS c·ªßa ng√†nh')
    
    with st.expander("üí∞ S·ª©c Kh·ªèe T√†i Ch√≠nh"):
        display_bar_chart(df_filtered, 'ticker', 'financial_health', 'S·ª©c kh·ªèe t√†i ch√≠nh c·ªßa ng√†nh')
        display_bar_chart(df_filtered, 'ticker', 'doe', 'T·ª∑ l·ªá n·ª£ tr√™n v·ªën ch·ªß s·ªü h·ªØu')
    
    with st.expander("üìà ƒê·ªãnh Gi√°"):
        display_bar_chart(df_filtered, 'ticker', 'pe', 'Ch·ªâ s·ªë P/E c·ªßa ng√†nh')
        display_bar_chart(df_filtered, 'ticker', 'pb', 'Ch·ªâ s·ªë P/B c·ªßa ng√†nh')
        display_bar_chart(df_filtered, 'ticker', 'ev_ebitda', 'EV/EBITDA c·ªßa ng√†nh')
    
    with st.expander("üéØ C·ªï T·ª©c"):
        display_bar_chart(df_filtered, 'ticker', 'dividend_yield', 'T·ª∑ l·ªá c·ªï t·ª©c c·ªßa ng√†nh')
    
    with st.expander("üöÄ TƒÉng Tr∆∞·ªüng L·ª£i Nhu·∫≠n"):
        display_bar_chart(df_filtered, 'ticker', 'revenue_growth_1y', 'TƒÉng tr∆∞·ªüng doanh thu 1 nƒÉm')
        display_bar_chart(df_filtered, 'ticker', 'eps_growth_1y', 'TƒÉng tr∆∞·ªüng EPS 1 nƒÉm')